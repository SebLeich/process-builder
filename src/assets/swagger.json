{
  "swagger" : "2.0",
  "info" : {
    "version" : "v1",
    "title" : "wista.backend"
  },
  "host" : "localhost:50367",
  "schemes" : [ "http" ],
  "paths" : {
    "/api/accesslog/pagination" : {
      "post" : {
        "tags" : [ "AccessLog" ],
        "summary" : "the method returns a pagination result containing all access prevented log entries",
        "operationId" : "AccessLog_GetAllAccessPreventedLogEntries",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all access prevented log entries",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/accesslog" : {
      "post" : {
        "tags" : [ "AccessLog" ],
        "summary" : "the method enables clients to register a prevented access attempt",
        "operationId" : "AccessLog_RegisterPreventedAccessAttempt",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "log",
          "description" : "log model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ACCESSDENIEDLOG"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created access prevented log entry",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          }
        }
      }
    },
    "/api/accesslog/{guid}" : {
      "delete" : {
        "tags" : [ "AccessLog" ],
        "summary" : "the endpoint enables user's to delete prevented access attempt log entries",
        "operationId" : "AccessLog_DeletePreventedAccessAttempt",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "entry's guid",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the successfully deleted access prevented log entry",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed guid is not pointing to any log entry"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/account" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the method returns a list containing all users",
        "operationId" : "Account_GetUsers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables user's to update users",
        "operationId" : "Account_PutUserAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "userModel",
          "description" : "updated user",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/all-users" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the method returns all users",
        "operationId" : "Account_GetAllUsers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userid}" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the method returns an user with the given id",
        "operationId" : "Account_GetUserByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "id of the user",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/byusername/{userName}" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the method returns an user with the given name",
        "operationId" : "Account_GetUserByNameAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userName",
          "in" : "path",
          "description" : "user's name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userId}/block" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to block users",
        "operationId" : "Account_BlockUser",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userId}/unblock" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to unblock users",
        "operationId" : "Account_UnblockUser",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userId}/only-customer" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to block users",
        "operationId" : "Account_SetCustomerOnlyFlag",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userId}/not-only-customer" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to unblock users",
        "operationId" : "Account_RemoveCustomerOnlyFlag",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userId}/add-customer/{customerId}" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to add a customer to an user",
        "operationId" : "Account_AddUserCustomer",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{userId}/remove-customer/{customerId}" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to remove user customers",
        "operationId" : "Account_RemoveUserCustomer",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/register" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint registers a new user",
        "operationId" : "Account_Register",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "userModel",
          "description" : "new user",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/{id}" : {
      "delete" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables user's to delete users",
        "operationId" : "Account_DeleteUserAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "user's id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/registered/{username}" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint returns wether the passed username is already used",
        "operationId" : "Account_IsRegisteredAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "user's name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/change-password" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to change user's passwords",
        "operationId" : "Account_ChangePasswordAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "PasswordModel",
          "description" : "password model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangePasswordModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/lock/{userId}" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables users to lock users out",
        "operationId" : "Account_LockUsersOutAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "end",
          "description" : "lock out end",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "no content when user is locked out successful",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no valid date was passed within the request OR the userid is not referencing a user"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/account/unlock/{userId}" : {
      "get" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables users to unlock users",
        "operationId" : "Account_UnlockUserAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "no content when user is locked out successful",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no the userid is not referencing a user"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the user is not locked out"
          }
        }
      }
    },
    "/api/account/signature" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables users to create new signatures",
        "operationId" : "Account_CreateOwnSignature",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "signature",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SIGNATURE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "no content when signature is created",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no the userid is not referencing a user OR no signature passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/account/signature/{signatureId}" : {
      "delete" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables users to delete signatures",
        "operationId" : "Account_DeleteOwnSignature",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "signatureId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "no content when signature is created",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no the userid is not referencing a user OR no signature passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/account/upload-image" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables clients to upload pictures",
        "operationId" : "Account_UploadUserImage",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/reset-password" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables client's to reset user passwords",
        "operationId" : "Account_StartPasswordReset",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResetPasswordRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/account/confirm-password-reset" : {
      "post" : {
        "tags" : [ "Account" ],
        "summary" : "the endpoint enables client's to confirm a pending password reset",
        "operationId" : "Account_ConfirmPasswordReset",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfirmPasswordResetRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/address" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint provides all addresses",
        "operationId" : "Address_GetAllAddressesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all addresses",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint enables user's to create new addresses",
        "operationId" : "Address_PostAddressAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "address",
          "description" : "new address",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ADDRESS"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created address",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed address is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint enables user's to update addresses",
        "operationId" : "Address_PutAddressAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "address",
          "description" : "address",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ADDRESS"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated address",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed address is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/address/{id}" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint returns addresses by id",
        "operationId" : "Address_GetAddressByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "address's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all addresses",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an address"
          }
        }
      },
      "delete" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint enables user's to delete addresses",
        "operationId" : "Address_DeleteAddressAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "address's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted address",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any address"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/address/search" : {
      "post" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint enables user's to search for addresses",
        "operationId" : "Address_GetAddressesBySearchAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching addresses",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/address/search-by-zipcode/{zipcode}" : {
      "get" : {
        "tags" : [ "Address" ],
        "summary" : "the endpoint returns a city for a passed zip code",
        "operationId" : "Address_GetAddressesByZipCodeAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "zipcode",
          "in" : "path",
          "description" : "requested zipcode",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching addresses",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability" : {
      "get" : {
        "tags" : [ "Availability" ],
        "summary" : "the endpoint provides all availabilities",
        "operationId" : "Availability_GetAllAvailabilities",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilities",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Availability" ],
        "summary" : "the endpoint enables user's to create new availabilities",
        "operationId" : "Availability_PostAvailabilityAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "availability",
          "description" : "new availability",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITY"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created availability",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availability is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Availability" ],
        "summary" : "the endpoint enables user's to update availabilities",
        "operationId" : "Availability_PutAvailabilityAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "availability",
          "description" : "availability",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITY"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated availability",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availability is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability/{id}" : {
      "get" : {
        "tags" : [ "Availability" ],
        "summary" : "the endpoint returns availabilities by id",
        "operationId" : "Availability_GetAvailabilityById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availability's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilities",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an availability"
          }
        }
      },
      "delete" : {
        "tags" : [ "Availability" ],
        "summary" : "the endpoint enables user's to delete availabilities",
        "operationId" : "Availability_DeleteAvailabilityAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availability's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted availability",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any availability"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability-component" : {
      "get" : {
        "tags" : [ "AvailabilityComponent" ],
        "summary" : "the endpoint provides all availabilitycomponents",
        "operationId" : "AvailabilityComponent_GetAllAvailabilityComponentsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilitycomponents",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "AvailabilityComponent" ],
        "summary" : "the endpoint enables user's to create new availabilitycomponents",
        "operationId" : "AvailabilityComponent_PostAvailabilityComponentAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "component",
          "description" : "new availabilitycomponent",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITYCOMPONENT"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created availabilitycomponent",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availabilitycomponent is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "AvailabilityComponent" ],
        "summary" : "the endpoint enables user's to update availabilitycomponents",
        "operationId" : "AvailabilityComponent_PutAvailabilityComponentAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "component",
          "description" : "availabilitycomponent",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITYCOMPONENT"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated availabilitycomponent",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availabilitycomponent is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability-component/{id}" : {
      "get" : {
        "tags" : [ "AvailabilityComponent" ],
        "summary" : "the endpoint returns availabilitycomponents by id",
        "operationId" : "AvailabilityComponent_GetAvailabilityComponentByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availabilitycomponent's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilitycomponents",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an availabilitycomponent"
          }
        }
      },
      "delete" : {
        "tags" : [ "AvailabilityComponent" ],
        "summary" : "the endpoint enables user's to delete availabilitycomponents",
        "operationId" : "AvailabilityComponent_DeleteAvailabilityComponentAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availabilitycomponent's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created availabilitycomponent",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any availabilitycomponent"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability-requirement" : {
      "get" : {
        "tags" : [ "AvailabilityRequirement" ],
        "summary" : "the endpoint provides all availabilityrequirements",
        "operationId" : "AvailabilityRequirement_GetAllAvailabilitiyRequirements",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilityrequirements",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "AvailabilityRequirement" ],
        "summary" : "the endpoint enables user's to create new availabilityrequirements",
        "operationId" : "AvailabilityRequirement_PostAvailabilityRequirement",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "requirement",
          "description" : "new availabilityrequirement",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITYREQUIREMENT"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created availabilityrequirement",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availabilityrequirement is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "AvailabilityRequirement" ],
        "summary" : "the endpoint enables user's to update availabilityrequirements",
        "operationId" : "AvailabilityRequirement_PutAvailabilityRequirement",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "requirement",
          "description" : "availabilityrequirement",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITYREQUIREMENT"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated availabilityrequirement",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availabilityrequirement is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability-requirement/{id}" : {
      "get" : {
        "tags" : [ "AvailabilityRequirement" ],
        "summary" : "the endpoint returns availabilityrequirements by id",
        "operationId" : "AvailabilityRequirement_GetAvailabilityRequirementById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availabilityrequirement's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an availabilityrequirement",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an availabilityrequirement"
          }
        }
      },
      "delete" : {
        "tags" : [ "AvailabilityRequirement" ],
        "summary" : "the endpoint enables user's to delete availabilityrequirements",
        "operationId" : "AvailabilityRequirement_DeleteAvailabilityRequirement",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availability's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted availabilityrequirement",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any availabilityrequirement"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability-status" : {
      "get" : {
        "tags" : [ "AvailabilityStatus" ],
        "summary" : "the endpoint provides all availabilitystates",
        "operationId" : "AvailabilityStatus_GetAllAvailabilityStatusAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilitystates",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "AvailabilityStatus" ],
        "summary" : "the endpoint enables user's to create new availabilitystates",
        "operationId" : "AvailabilityStatus_PostAvailabilityStatusAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "state",
          "description" : "new availabilitystate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITYSTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created availabilitystate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availabilitystate is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "AvailabilityStatus" ],
        "summary" : "the endpoint enables user's to update availabilitystates",
        "operationId" : "AvailabilityStatus_PutAvailabilityStatusAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "status",
          "description" : "availability status",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AVAILABILITYSTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated availabilitystate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed availabilitystate is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/availability-status/{id}" : {
      "get" : {
        "tags" : [ "AvailabilityStatus" ],
        "summary" : "the endpoint returns availabilitystates by id",
        "operationId" : "AvailabilityStatus_GetAvailabilityStatusByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availabilitystate's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilitystates",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an availabilitystate"
          }
        }
      },
      "delete" : {
        "tags" : [ "AvailabilityStatus" ],
        "summary" : "the endpoint enables user's to delete availabilitystates",
        "operationId" : "AvailabilityStatus_DeleteAvailabilityStatusAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availability status identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created availabilitystate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any availabilitystate"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/change/search" : {
      "post" : {
        "tags" : [ "Change" ],
        "summary" : "the endpoint enables user's to search for changes",
        "operationId" : "Change_SearchByString",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching changes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/change/history" : {
      "post" : {
        "tags" : [ "Change" ],
        "summary" : "the endpoint returns a number of change history entries in accordance to the passed pagination page",
        "operationId" : "Change_GetChangeHistory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's change history",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no change"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Change" ],
        "summary" : "the endpoint enables user's to delete their change history",
        "operationId" : "Change_ClearHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/change/watched" : {
      "post" : {
        "tags" : [ "Change" ],
        "summary" : "the method returns a set of watched changes for the current user",
        "operationId" : "Change_GetWatchedChanges",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's watched changes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/change/latest" : {
      "post" : {
        "tags" : [ "Change" ],
        "summary" : "the method returns a set of recently created changes",
        "operationId" : "Change_GetLatestIssues",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the latest changes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/change/assigned" : {
      "post" : {
        "tags" : [ "Change" ],
        "summary" : "the method returns a set of assigned changes for the current user",
        "operationId" : "Change_GetAssignedChanges",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's assigned changes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/change/unseen" : {
      "post" : {
        "tags" : [ "Change" ],
        "summary" : "the method returns a set of unseen changes for the current user",
        "operationId" : "Change_GetUnseenChanges",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's unseen changes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/changetype" : {
      "get" : {
        "tags" : [ "ChangeType" ],
        "summary" : "the endpoint returns all changetypes",
        "operationId" : "ChangeType_GetAllChangeTypes",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all changetypes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "ChangeType" ],
        "summary" : "the endpoint creates a new changetype",
        "operationId" : "ChangeType_PostChangeType",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "new changetype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CHANGETYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a changetype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed type is null OR the passed object references no changetype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "ChangeType" ],
        "summary" : "the endpoint updates an existing changetype",
        "operationId" : "ChangeType_PutChangeType",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "changetype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CHANGETYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an updated changetype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed type is null OR the passed object references no changetype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/changetype/{id}" : {
      "get" : {
        "tags" : [ "ChangeType" ],
        "summary" : "the endpoint returns a changetype with the passed identifier",
        "operationId" : "ChangeType_GetChangeTypeById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "changetype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a changetype",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id references no changetype"
          }
        }
      },
      "delete" : {
        "tags" : [ "ChangeType" ],
        "summary" : "the endpoint removes a changetype with the passed identifier",
        "operationId" : "ChangeType_DeleteChangeType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "changetype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted changetype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier references no changetype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contact-information" : {
      "get" : {
        "tags" : [ "ContactInformation" ],
        "summary" : "the endpoint provides all contact information",
        "operationId" : "ContactInformation_GetAllContactInformation",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all contactinformation",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "ContactInformation" ],
        "summary" : "the endpoint enables user's to create new contactinformation",
        "operationId" : "ContactInformation_PostContactInformation",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "info",
          "description" : "new contactinformation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTACTINFORMATION"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created contactinformation",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed contactinformation is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "ContactInformation" ],
        "summary" : "the endpoint enables user's to update contactinformations",
        "operationId" : "ContactInformation_PutContactInformation",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "info",
          "description" : "contactinformation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTACTINFORMATION"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contactinformation",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed contactinformation is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contact-information/{id}" : {
      "delete" : {
        "tags" : [ "ContactInformation" ],
        "summary" : "the endpoint enables user's to delete contact information",
        "operationId" : "ContactInformation_DeleteContactInformation",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contactinformation's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created contactinformation",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any contactinformation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contact-information-type" : {
      "get" : {
        "tags" : [ "ContactInformationType" ],
        "summary" : "the endpoint returns all contactinformationtypes",
        "operationId" : "ContactInformationType_GetAllContactInformationTypesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ContactInformationType" ],
        "summary" : "the endpoint enables users to create a new contactinformationtype",
        "operationId" : "ContactInformationType_PostContactInformationTypeAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "new contactinformationtype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTACTINFORMATIONTYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ContactInformationType" ],
        "summary" : "the endpoint enables users to update contactinformationtypes",
        "operationId" : "ContactInformationType_PutContactInformationTypeAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "contactinformationtype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTACTINFORMATIONTYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contact-information-type/{id}" : {
      "delete" : {
        "tags" : [ "ContactInformationType" ],
        "summary" : "the endpoint enables users to delete contactinformationtypes",
        "operationId" : "ContactInformationType_DeleteContactInformationTypeAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contactinformationtype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contactpersonal" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the method returns a set of contactpersonal",
        "operationId" : "ContactPersonal_GetContactPersonalAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables users to create new contact personal",
        "operationId" : "ContactPersonal_PostContactPersonalAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "person",
          "description" : "new contact personal",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CONTACTPERSONAL]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables users to update contact personal",
        "operationId" : "ContactPersonal_PutContactPersonalAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "person",
          "description" : "contact personal",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CONTACTPERSONAL]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contactpersonal/{id}" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint returns a contact person with the given id",
        "operationId" : "ContactPersonal_GetByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "identifier of the contact person",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint removes a contactperson with the passed identifier",
        "operationId" : "ContactPersonal_DeleteContactPersonalAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contactperson's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted contactpersonal",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contactperson"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/{id}/customers" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint returns a set of customers for a contact",
        "operationId" : "ContactPersonal_GetCustomersForContact",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "identifier of the contact person",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contactpersonal/customer/{id}" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint returns all contact personal for a customer",
        "operationId" : "ContactPersonal_GetByCustomerAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contactpersonal/generate-number" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables client's to generate new contact numbers",
        "operationId" : "ContactPersonal_GenerateContactNumberAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contactpersonal/search" : {
      "post" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables user's to search for contactpersons",
        "operationId" : "ContactPersonal_SearchByStringAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching contactperson",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/user-filter-search/{filterId}" : {
      "post" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint returns a set of contacts in accordance to the passed user filter's identifier conditions",
        "operationId" : "ContactPersonal_UserFilterContractSearch",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contactpersonal/watched" : {
      "post" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the method returns a set of favoured contactpersons for the current user",
        "operationId" : "ContactPersonal_GetWatchedContactPersonalAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "passed pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's favoured contactpersons",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/{id}/watch" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables users to favor contactpersonal",
        "operationId" : "ContactPersonal_WatchContactPersonalAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contactpersonal's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contactpersonal",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contactperson OR the contactperson was already favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/{id}/unwatch" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables users to unfavor contactpersonal",
        "operationId" : "ContactPersonal_UnwatchContactPersonalAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contactpersonal's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contactperson",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contactperson OR the contactperson was not favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/history" : {
      "post" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint returns a number of contactperson history entries in accordance to the passed pagination page",
        "operationId" : "ContactPersonal_GetContactpersonHistory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's contactpersonhistory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contactperson"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint enables user's to delete their contactperson history",
        "operationId" : "ContactPersonal_ClearHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/history/{contactpersonId}" : {
      "get" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint creates a new contactperson history entry",
        "operationId" : "ContactPersonal_SaveHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "contactpersonId",
          "in" : "path",
          "description" : "contactperson's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the created contactpersonhistoryentry",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contactperson"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contactpersonal/departments" : {
      "post" : {
        "tags" : [ "ContactPersonal" ],
        "summary" : "the endpoint returns all contactpersonal departments stored within the database",
        "operationId" : "ContactPersonal_GetDepartments",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint returns all contracts",
        "operationId" : "Contract_GetAllContracts",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all contracts",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint creates a new contract",
        "operationId" : "Contract_PostContract",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "contract",
          "description" : "new contract",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CONTRACT]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the newly created contract",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed contract object is empty"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint updates an existing contract",
        "operationId" : "Contract_PutContract",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "contract",
          "description" : "contract",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CONTRACT]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contract",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed contract object is empty OR the contract's identifier points to no contract"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint returns a contract with the given id",
        "operationId" : "Contract_GetContractById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the contract",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a contract",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no contract"
          }
        }
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint removes a contract from the database",
        "operationId" : "Contract_DeleteContract",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contract's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted contract",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contract"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/generate-number" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the method returns the next contract number",
        "operationId" : "Contract_GetNextContractNumber",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract/search" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint enables user's to search for contracts",
        "operationId" : "Contract_SearchByString",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching contract",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/user-filter-search/{filterId}" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint returns a set of contracts in accordance to the passed user filter's identifier conditions",
        "operationId" : "Contract_UserFilterContractSearch",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract/favourites" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "the method returns a set of favoured contracts for the current user",
        "operationId" : "Contract_GetWatchedContractsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "the current pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's favoured contracts",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/history" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint returns a number of contract history entries in accordance to the passed pagination page",
        "operationId" : "Contract_GetContractHistoryAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's contracthistory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contract"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint enables user's to delete their contract history",
        "operationId" : "Contract_ClearHistoryAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/history/{contractId}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint creates a new contracthistoryentry",
        "operationId" : "Contract_SaveHistoryAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "contractId",
          "in" : "path",
          "description" : "contract's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the created contracthistoryentry",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contract"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/{id}/watched" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint returns whether a contract is watched by the current user",
        "operationId" : "Contract_IsContractWatchedAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contract's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract/{contractId}/watch" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint enables users to watch contracts",
        "operationId" : "Contract_WatchContractAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "contractId",
          "in" : "path",
          "description" : "contract's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contract",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contract OR the contract was already favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/{contractId}/unwatch" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint enables users to unwatch contracts",
        "operationId" : "Contract_UnwatchContractAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "contractId",
          "in" : "path",
          "description" : "contract's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contract",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no contract OR the contract was not favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract/by-customer/{customerId}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "the endpoint enables clients to load a customer's contracts",
        "operationId" : "Contract_GetCustomerContracts",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract-item" : {
      "get" : {
        "tags" : [ "ContractItem" ],
        "summary" : "the endpoint returns all contract items from the database",
        "operationId" : "ContractItem_GetAllContractItems",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ContractItem" ],
        "summary" : "the endpoint persists a new contract item to the database",
        "operationId" : "ContractItem_PostContractItemAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "item",
          "description" : "new contract item",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CONTRACTITEM]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ContractItem" ],
        "summary" : "the endpoint updates an existing contract item",
        "operationId" : "ContractItem_PutContractItemAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "item",
          "description" : "contract item",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CONTRACTITEM]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract-item/{id}" : {
      "get" : {
        "tags" : [ "ContractItem" ],
        "summary" : "the endpoint returns a contract item by id",
        "operationId" : "ContractItem_GetContractItemByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contractitem's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ContractItem" ],
        "summary" : "the endpoint removes a contract item from the database",
        "operationId" : "ContractItem_DeleteContractItemAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contract item's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/contract-status" : {
      "get" : {
        "tags" : [ "ContractStatus" ],
        "summary" : "the endpoint provides all contract status",
        "operationId" : "ContractStatus_GetAllContractStatus",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all contract status",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "ContractStatus" ],
        "summary" : "the endpoint enables user's to create new contract status",
        "operationId" : "ContractStatus_PostContractStatus",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "status",
          "description" : "contract status",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTRACTSTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created contract status",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed contract status is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "ContractStatus" ],
        "summary" : "the endpoint enables user's to update contract status",
        "operationId" : "ContractStatus_PutContractState",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "state",
          "description" : "contract status",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTRACTSTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated contract status",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed contract status is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract-status/{id}" : {
      "get" : {
        "tags" : [ "ContractStatus" ],
        "summary" : "the endpoint returns contract status by id",
        "operationId" : "ContractStatus_GetContractStateById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contract status identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all contract status",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an contract status"
          }
        }
      },
      "delete" : {
        "tags" : [ "ContractStatus" ],
        "summary" : "the endpoint enables user's to delete contract status",
        "operationId" : "ContractStatus_DeleteContractStatus",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contract status identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created contract status",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any contract status"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract-type" : {
      "get" : {
        "tags" : [ "ContractType" ],
        "summary" : "the endpoint returns all contracttypes",
        "operationId" : "ContractType_GetAllContractTypesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all contracttypes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "ContractType" ],
        "summary" : "the endpoint creates a new contracttype",
        "operationId" : "ContractType_PostContractTypeAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "new contracttype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTRACTTYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a contracttype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed type is null OR the passed object references no contracttype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "ContractType" ],
        "summary" : "the endpoint updates an existing contracttype",
        "operationId" : "ContractType_PutContractTypeAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "contracttype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CONTRACTTYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an updated contracttype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed type is null OR the passed object references no contracttype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/contract-type/{id}" : {
      "get" : {
        "tags" : [ "ContractType" ],
        "summary" : "the endpoint returns a contracttype with the passed identifier",
        "operationId" : "ContractType_GetContractTypeByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contracttype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a contracttype",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id references no contracttype"
          }
        }
      },
      "delete" : {
        "tags" : [ "ContractType" ],
        "summary" : "the endpoint removes a contracttype with the passed identifier",
        "operationId" : "ContractType_DeleteContractTypeAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contracttype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted contracttype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier references no contracttype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns overview models of all customers",
        "operationId" : "Customer_GetAllCustomers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all customers",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables user's to create customers",
        "operationId" : "Customer_PostCustomerAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "customer",
          "description" : "new customer",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CUSTOMER]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the newly created customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed customer object is empty"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables user's to update customers",
        "operationId" : "Customer_PutCustomerAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "customer",
          "description" : "customer",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[CUSTOMER]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed customer object is empty OR the customer's identifier points to no customer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/{id}" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns a customer for the passed id",
        "operationId" : "Customer_GetCustomerByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a customer",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables user's to delete customers",
        "operationId" : "Customer_DeleteCustomerAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "request body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DeleteCustomerRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/next-number" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables clients to retrieve the next customer number",
        "operationId" : "Customer_GetNextCustomerNumber",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/customer/{customerId}/contracts" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns all contracts for a customer with the given id",
        "operationId" : "Customer_GetCustomersContracts",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifer",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of contracts",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      }
    },
    "/api/customer/{customerId}/contract-items" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables client's to fetch a customer's contract items",
        "operationId" : "Customer_GetCustomerContractItems",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/customer/{customerId}/offers" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns all offers for a customer with the passed id",
        "operationId" : "Customer_GetCustomersOffers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "offer's identifer",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of offers",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      }
    },
    "/api/customer/{id}/charts" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the method returns all prepared charts for a customer with the given identifier",
        "operationId" : "Customer_GetCustomerCharts",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/search" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables user's to search for customers",
        "operationId" : "Customer_SearchByString",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching customer",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/user-filter-search/{filterId}" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns a set of customers in accordance to the passed user filter's identifier conditions",
        "operationId" : "Customer_UserFilterCustomerSearch",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/customer/{id}/watched" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns whether a customer is watched by the current user",
        "operationId" : "Customer_IsCustomerWatchedAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/customer/favourites" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the method returns a set of watched customers for the current user",
        "operationId" : "Customer_GetWatchedCustomersAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "the current pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's favoured customers",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/{customerId}/contacts" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the method enables clients to request a customer's contacts",
        "operationId" : "Customer_GetCustomerContacts",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the customer's contacts",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/contactpersonal/add" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint links a contact person and a customer",
        "operationId" : "Customer_AddContactPersonal",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "link",
          "description" : "link model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CUSTOMERCPERSONALLINK"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer OR the passed link object points to no customer/contactpersonal"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/contactpersonal/delete" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns a link between a customer and a contactperson",
        "operationId" : "Customer_RemoveContactPersonal",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "link",
          "description" : "link model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CUSTOMERCPERSONALLINK"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer OR the passed link object points to no customer/contactpersonal"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/history" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns a number of customer history entries in accordance to the passed pagination page",
        "operationId" : "Customer_GetCustomerHistory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's customerhistory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables user's to delete their customer history",
        "operationId" : "Customer_ClearHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/history/{customerId}" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint creates a new customer history entry",
        "operationId" : "Customer_SaveHistoryAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the created customerhistoryentry",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/{customerId}/watch" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables users to favor customers",
        "operationId" : "Customer_WatchCustomerAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated customer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer OR the customer was already favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/{customerId}/unwatch" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint enables users to unfavor customers",
        "operationId" : "Customer_UnwatchCustomerAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the customer's audit entries",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no customer OR the customer was not favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/audit/{customerId}" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "the method returns the current audit view according to the given page and the given customer",
        "operationId" : "Customer_GetAuditForCustomer",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "page",
          "description" : "requested page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the audit entries",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "In case the passed pagination page is null OR the pagination page number is lower or equal 0"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/customer/{id}/emailAddresses" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "the endpoint returns all emails addresses for a customer with the passed identifier",
        "operationId" : "Customer_GetCustomerEMailAddresses",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of contact informations",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      }
    },
    "/api/default-mail" : {
      "get" : {
        "tags" : [ "DefaultMail" ],
        "summary" : "the endpoint returns all default mails from the database",
        "operationId" : "DefaultMail_GetAllDefaultMailsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all defaultmails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "DefaultMail" ],
        "summary" : "the endpoint persists a new default mail to the database",
        "operationId" : "DefaultMail_PostDefaultMailAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "mail",
          "description" : "new default mail",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueTransactionDefaultMailResponse"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a defaultmail",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object is passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "DefaultMail" ],
        "summary" : "the endpoint updates an existing default mail",
        "operationId" : "DefaultMail_PutDefaultMailAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "mail",
          "description" : "new default mail",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueTransactionDefaultMailResponse"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a defaultmail",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object is passed within the request OR the passed identifier is not pointing to any defaultmail"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-mail/{id}" : {
      "get" : {
        "tags" : [ "DefaultMail" ],
        "summary" : "the endpoint returns a default mail by guid",
        "operationId" : "DefaultMail_GetDefaultMailByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "query",
          "description" : "defaultmail's guid",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "returns a default mail",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier is not pointing any defaultmail"
          }
        }
      }
    },
    "/api/default-mail/{guid}" : {
      "delete" : {
        "tags" : [ "DefaultMail" ],
        "summary" : "the endpoint removes a default mail from the database",
        "operationId" : "DefaultMail_DeleteDefaultMailAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "default mail's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a defaultmail",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any defaultmail"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-notification/search" : {
      "post" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the endpoint returns all default notifications",
        "operationId" : "DefaultNotification_GetDefaultNotificationsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all default notifications",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-notification/{guid}" : {
      "get" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the method returns a defaultnotification with the passed identifier",
        "operationId" : "DefaultNotification_GetDefaultNotificationByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "default notification's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a defaultnotification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any defaultnotification"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the method removes a default notification with the passed identifier",
        "operationId" : "DefaultNotification_DeleteDefaultNotificationByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "default notification's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted default notification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any defaultnotification"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-notification/{guid}/transactions" : {
      "get" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the method returns a defaultnotification with the passed identifier",
        "operationId" : "DefaultNotification_GetDefaultNotificationIssueTransactionIds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "default notification's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a defaultnotification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any defaultnotification"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-notification" : {
      "post" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the endpoint enables user's to create new defaultnotifications",
        "operationId" : "DefaultNotification_PostDefaultNotificationAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "defaultNotification",
          "description" : "default notification object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DefaultNotification"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created defaultnotification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object was passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the endpoint enables user's to update defaultnotifications",
        "operationId" : "DefaultNotification_PutDefaultNotificationAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "defaultNotification",
          "description" : "default notification object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DefaultNotification"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated defaultnotification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object was passed within the request OR the identifier is not pointing to any defaultnotification"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-notification/{guid}/update-transactions" : {
      "post" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the endpoint enables clients to update a default notification's transactions",
        "operationId" : "DefaultNotification_UpdateDefaultNotificationTransactionsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "default notification's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "transactionIds",
          "description" : "transaction identifiers",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid",
              "example" : "00000000-0000-0000-0000-000000000000"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted default notification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any defaultnotification"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/default-notification/customer-default" : {
      "get" : {
        "tags" : [ "DefaultNotification" ],
        "summary" : "the endpoint enables clients to load all customer default notifications",
        "operationId" : "DefaultNotification_GetCustomerDefaultNotificationsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the customer default notification",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any defaultnotification"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/filter" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "the endpoint provides all filters",
        "operationId" : "Filter_GetAllFilters",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all filters",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : "the endpoint enables user's to create new filters",
        "operationId" : "Filter_PostFilter",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "filter",
          "description" : "new filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FILTER"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created filter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed filter is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Filter" ],
        "summary" : "the endpoint enables user's to update filters",
        "operationId" : "Filter_PutFilter",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "filter",
          "description" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FILTER"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated filter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed filter is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/filter/{id}" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "the endpoint returns filters by id",
        "operationId" : "Filter_GetFilterById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all filters",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an filter"
          }
        }
      },
      "delete" : {
        "tags" : [ "Filter" ],
        "summary" : "the endpoint enables user's to delete filters",
        "operationId" : "Filter_DeleteFilter",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created filter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any filter"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/filtercondition" : {
      "get" : {
        "tags" : [ "FilterCondition" ],
        "summary" : "the endpoint provides all filterconditions",
        "operationId" : "FilterCondition_GetAllFilterConditions",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all filterconditions",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "FilterCondition" ],
        "summary" : "the endpoint enables user's to create new filterconditions",
        "operationId" : "FilterCondition_PostFilterCondition",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "filtercondition",
          "description" : "new filtercondition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FILTERCONDITION"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created filtercondition",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed filtercondition is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "FilterCondition" ],
        "summary" : "the endpoint enables user's to update filterconditions",
        "operationId" : "FilterCondition_PutFilterCondition",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "filtercondition",
          "description" : "filtercondition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FILTERCONDITION"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated filtercondition",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed filtercondition is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/filtercondition/{id}" : {
      "get" : {
        "tags" : [ "FilterCondition" ],
        "summary" : "the endpoint returns filterconditions by id",
        "operationId" : "FilterCondition_GetFilterConditionById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "filtercondition's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all filterconditions",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an filtercondition"
          }
        }
      },
      "delete" : {
        "tags" : [ "FilterCondition" ],
        "summary" : "the endpoint enables user's to delete filterconditions",
        "operationId" : "FilterCondition_DeleteFilterCondition",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "filtercondition's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created filtercondition",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any filtercondition"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/incident/search" : {
      "post" : {
        "tags" : [ "Incident" ],
        "summary" : "the endpoint enables user's to search for incidents",
        "operationId" : "Incident_SearchByString",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching incident",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/incident/history" : {
      "post" : {
        "tags" : [ "Incident" ],
        "summary" : "the endpoint returns a number of incident history entries in accordance to the passed pagination page",
        "operationId" : "Incident_GetIncidentHistory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's incident history",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no incident"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident" ],
        "summary" : "the endpoint enables user's to delete their incident history",
        "operationId" : "Incident_ClearHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/incident/watched" : {
      "post" : {
        "tags" : [ "Incident" ],
        "summary" : "the method returns a set of watched incidents for the current user",
        "operationId" : "Incident_GetWatchedIncidents",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's watched incidents",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/incident/latest" : {
      "post" : {
        "tags" : [ "Incident" ],
        "summary" : "the method returns a set of recently created incidents",
        "operationId" : "Incident_GetLatestIncidents",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the latest created incidents",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/incident/assigned" : {
      "post" : {
        "tags" : [ "Incident" ],
        "summary" : "the method returns a set of assigned incidents for the current user",
        "operationId" : "Incident_GetAssignedIncidents",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's assigned incidents",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/incident/unseen" : {
      "post" : {
        "tags" : [ "Incident" ],
        "summary" : "the method returns a set of unseen incidents for the current user",
        "operationId" : "Incident_GetUnseenIncidents",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's unseen incidents",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/issue/{id}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns an issue with the given id",
        "operationId" : "Issue_GetIssueByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no issue"
          }
        }
      },
      "delete" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables user's to remove existing issues from the database",
        "operationId" : "Issue_DeleteIssueAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the issue",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted issue",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/by-customer/{customerId}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables client's to fetch a customer's issues",
        "operationId" : "Issue_GetIssuesByCustomerAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue/{id}/check-version/{concurrencyStamp}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns whether a passed issue id concurrency stamp combination is valid",
        "operationId" : "Issue_CheckIssueVersionAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "concurrencyStamp",
          "in" : "path",
          "description" : "concurrency stamp",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue/{id}/watched" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns whether an issue is watched by the current user",
        "operationId" : "Issue_IsIssueWatchedAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables user's to create new issues",
        "operationId" : "Issue_PostIssueAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "issue",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[ISSUE]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the newly created issue",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issue object is empty"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables user's to update existing issues",
        "operationId" : "Issue_PutIssueAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[ISSUE]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated issue",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issue object is empty OR the issue's identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/{incidentId}/transform-to-issue/{issueId}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables user's to copy an incident's data into an issue and link them",
        "operationId" : "Issue_CopyIncidentToIssueAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "incidentId",
          "in" : "path",
          "description" : "incident's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the created issue",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no incident"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/{issueId}/issue-items" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns all items for a given issue",
        "operationId" : "Issue_GetIssueItemsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of issueitems",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/{issueId}/offers" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns all offers for a given issue",
        "operationId" : "Issue_GetOffersByIssueAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of offers",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/{issueId}/offer-items" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns all items for a given issue",
        "operationId" : "Issue_GetOfferItemsByIssue",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of issueitems",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/generateId" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint generates the next id for an issue",
        "operationId" : "Issue_GenerateIssueId",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the next issuenumber",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/overwrite-control-slip/{id}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables user's to update an issue's control slip",
        "operationId" : "Issue_OverwriteExcel",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue`s identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content on success",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the id points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/statistics" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns the issue type/state statistics",
        "operationId" : "Issue_GetStatistics",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue/change-audit/{issueId}" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the method returns the current audit view according to the given page and the given issue",
        "operationId" : "Issue_GetIssueChangeAudit",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "page",
          "description" : "requested page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the audit entries",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/{id}/seen" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint marks an issue with the given identifier as seen",
        "operationId" : "Issue_Seen",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is pointing to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issue is already marked as seen"
          }
        }
      }
    },
    "/api/issue/{id}/unseen" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint marks an issue with the given identifier as unseen",
        "operationId" : "Issue_Unseen",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is pointing to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issue is already marked as unseen"
          }
        }
      }
    },
    "/api/issue/{id}/watch" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint marks an issue with the given identifier as watched",
        "operationId" : "Issue_WatchAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is pointing to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issue is already marked as watched"
          }
        }
      }
    },
    "/api/issue/{id}/unwatch" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint marks an issue with the given identifier as unwatched",
        "operationId" : "Issue_UnwatchAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is pointing to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issue is already marked as unwatched"
          }
        }
      }
    },
    "/api/issue/{id}/assigned-users" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns an issue's assigned users",
        "operationId" : "Issue_GetAssignedUsersAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue's assigned users",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no issue"
          }
        }
      }
    },
    "/api/issue/{id}/assign/{userId}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint assigns an user an issue with the given identifier",
        "operationId" : "Issue_AssignUserAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is pointing to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the user is already assigned"
          }
        }
      }
    },
    "/api/issue/{id}/unassign/{userId}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint unassigns an user an issue with the given identifier",
        "operationId" : "Issue_UnassignUserAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is pointing to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the user is unassigned yet"
          }
        }
      }
    },
    "/api/issue/search" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables user's to search for issues",
        "operationId" : "Issue_SearchByStringAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching issue",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/user-filter-search/{filterId}" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns a set of issues in accordance to the passed user filter's identifier conditions",
        "operationId" : "Issue_UserFilterIssueSearchAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue/role-filter-search/{filterId}" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns a set of issue's in accordance to the passed role filter's identifier conditions",
        "operationId" : "Issue_RoleFilterSearchAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue/history" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns a number of issue history entries in accordance to the passed pagination page",
        "operationId" : "Issue_GetIssueHistory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's issue history",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables users to delete their issue history",
        "operationId" : "Issue_ClearHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/history/{issueId}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint creates a new issue history entry",
        "operationId" : "Issue_SaveHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the created issue history entry",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/{issueId}/emails" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint returns all linked emails for an issue",
        "operationId" : "Issue_GetEmailsForIssue",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains a set of emails",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issue identifier references no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue/watched" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the method returns a set of watched issues for the current user",
        "operationId" : "Issue_GetWatchedIssues",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's watched issues",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/issue/latest" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the method returns a set of recently created issues",
        "operationId" : "Issue_GetLatestIssues",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's watched issues",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/issue/assigned" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the method returns a set of assigned issues for the current user",
        "operationId" : "Issue_GetAssignedIssues",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's assigned issues",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/issue/unseen" : {
      "post" : {
        "tags" : [ "Issue" ],
        "summary" : "the method returns a set of unseen issues for the current user",
        "operationId" : "Issue_GetUnseenIssues",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's unseen issues",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/issue/{id}/files-archived/{value}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the endpoint enables client's to update an issue's files archived flag",
        "operationId" : "Issue_SetFilesArchived",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "value",
          "in" : "path",
          "description" : "files archived flag",
          "required" : true,
          "type" : "boolean"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue/audit-status/{guid}" : {
      "get" : {
        "tags" : [ "Issue" ],
        "summary" : "the method returns an issue audit status by guid",
        "operationId" : "Issue_GetIssueAuditStatus",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "status guid",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-audit/{guid}" : {
      "delete" : {
        "tags" : [ "IssueAudit" ],
        "operationId" : "IssueAudit_DeleteIssueAuditWrapperAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-audit/mark-wrapper-as-created/{guid}" : {
      "get" : {
        "tags" : [ "IssueAudit" ],
        "summary" : "the endpoint enables clients to mark an issue audit wrapper as created",
        "operationId" : "IssueAudit_MarkIssueAuditWrapperAsCreatedAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue audit wrapper",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-audit/mark-wrapper-as-finished/{guid}" : {
      "get" : {
        "tags" : [ "IssueAudit" ],
        "summary" : "the endpoint enables clients to mark an issue audit wrapper as finished",
        "operationId" : "IssueAudit_MarkIssueAuditWrapperAsFinishedAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue audit wrapper",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-category" : {
      "get" : {
        "tags" : [ "IssueCategory" ],
        "summary" : "the endpoint provides all issuecategories",
        "operationId" : "IssueCategory_GetAllIssueCategories",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issuecategories",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "IssueCategory" ],
        "summary" : "the endpoint enables user's to create new issuecategories",
        "operationId" : "IssueCategory_PostIssueCategory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "issuecategory",
          "description" : "new issuecategory",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ISSUECATEGORY"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created issuecategory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issuecategory is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "IssueCategory" ],
        "summary" : "the endpoint enables user's to update issuecategories",
        "operationId" : "IssueCategory_PutIssueCategory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "issuecategory",
          "description" : "issuecategory",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ISSUECATEGORY"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated issuecategory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issuecategory is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-category/{id}" : {
      "get" : {
        "tags" : [ "IssueCategory" ],
        "summary" : "the endpoint returns issuecategories by id",
        "operationId" : "IssueCategory_GetIssueCategoryById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issuecategory's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issuecategories",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an issuecategory"
          }
        }
      },
      "delete" : {
        "tags" : [ "IssueCategory" ],
        "summary" : "the endpoint enables user's to delete issuecategories",
        "operationId" : "IssueCategory_DeleteIssueCategory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issuecategory's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted issuecategory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any issuecategory"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-item" : {
      "get" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint returns all issue items from the database",
        "operationId" : "IssueItem_GetAllIssueItems",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issueitems",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint persists a new issueitem to the database",
        "operationId" : "IssueItem_PostIssueItem",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "item",
          "description" : "new issueitem",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[ISSUEITEM]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the newly created issueitem",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed item is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint updates an existing issueitem",
        "operationId" : "IssueItem_PutIssueItem",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "item",
          "description" : "issueitem",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[ISSUEITEM]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated issueitem",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed item is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-item/{id}" : {
      "get" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint returns an issueitem by id",
        "operationId" : "IssueItem_GetIssueItemById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issueitem's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issueitem",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an issueitem"
          }
        }
      },
      "delete" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint removes an issueitem from the database",
        "operationId" : "IssueItem_DeleteIssueItem",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issueitem's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated issueitem",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not referencing an issueitem"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-item/transform-separately-to-contract" : {
      "post" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint enables client's to transform an issue item into a contract item",
        "operationId" : "IssueItem_TransformSeparatelyToContract",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueItemContractMap"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-item/transform-to-contract-items" : {
      "post" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the endpoint enables user's to transform a set of issue items into contract items",
        "operationId" : "IssueItem_TransformIssueItemsToContractItems",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueItemContractItemTransformationRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-item/audit-status/{guid}" : {
      "get" : {
        "tags" : [ "IssueItem" ],
        "summary" : "the method returns an issue item audit status by guid",
        "operationId" : "IssueItem_GetIssueItemAuditStatus",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "status guid",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "summary" : "the endpoint enable clients to retrieve an issue report month",
        "operationId" : "IssueReport_GetReportMonthAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "report month request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ReportMonthRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/{type}" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "summary" : "the endpoint enables clients to fetch an issue report month's issue status for a specified issue type",
        "operationId" : "IssueReport_GetReportMonthIssueStatusForIssueTypeAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "issue type",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ReportMonthRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/issue-status/{guid}/issue-priorities" : {
      "get" : {
        "tags" : [ "IssueReport" ],
        "summary" : "the endpoint enables client's to fetch an issue report month status's priority entries",
        "operationId" : "IssueReport_GetReportMonthIssueStatusIssuePrioritiesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue report month status identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/issue-status/{guid}/issue-priority/{priorityIdentifier}" : {
      "get" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_GetReportMonthIssueStatusIssuePriorityAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "priorityIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/{year}/{month}/issue-status/{statusIdentifier}/issue-priority/{priorityIdentifier}" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_GetReportMonthIssueStatusIssuePriorityAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "year",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "month",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "statusIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "priorityIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/issue-status/{guid}/entries" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_GetIssueReportMonthIssueStatusEntriesAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/issue-status/{guid}/entries/{priorityIdentifier}" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_GetIssueReportMonthIssueStatusEntriesForIssuePriorityAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "priorityIdentifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/calculate-completely" : {
      "get" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_CalculateCompleteIssueReportAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/calculate-month" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_CalculateIssueReportMonthAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ReportMonthRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/ignore/{identifier}" : {
      "get" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_IgnoreIssueInReportAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/include/{identifier}" : {
      "get" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_IncludeIssueInReportAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/is-ignored/{identifier}" : {
      "get" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_IssueIsIgnoredInReportAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "identifier",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/calculate-issue-conclusion" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_CalculateIssueConclusionsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/IssueTimeConclusionRequest"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-report/{year}/{month}/conclusion/{status}/{priority}" : {
      "post" : {
        "tags" : [ "IssueReport" ],
        "operationId" : "IssueReport_CalculateTimeConclusionForReportMonthStatusAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "year",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "month",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "priority",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "blocks",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TimeConclusionRequestBlock"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-status" : {
      "get" : {
        "tags" : [ "IssueStatus" ],
        "summary" : "the endpoint provides all issuestates",
        "operationId" : "IssueStatus_GetAllIssueStates",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issuestates",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "IssueStatus" ],
        "summary" : "the endpoint enables user's to create new issuestates",
        "operationId" : "IssueStatus_PostIssueState",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "state",
          "description" : "new issuestate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ISSUESTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created issuestate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issuestate is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "IssueStatus" ],
        "summary" : "the endpoint enables user's to update issuestates",
        "operationId" : "IssueStatus_PutIssueState",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "state",
          "description" : "issuestate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ISSUESTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated issuestate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed issuestate is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-status/{id}" : {
      "get" : {
        "tags" : [ "IssueStatus" ],
        "summary" : "the endpoint returns issuestates by id",
        "operationId" : "IssueStatus_GetIssueStateById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issuestate's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issuestates",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an issuestate"
          }
        }
      },
      "delete" : {
        "tags" : [ "IssueStatus" ],
        "summary" : "the endpoint enables user's to delete issuestates",
        "operationId" : "IssueStatus_DeleteIssueState",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issuestate's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created issuestate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any issuestate"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns all issue transactions of the database",
        "operationId" : "IssueTransaction_GetIssueTransactionsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issue transactions",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the enpoint allows users to create new issue transactions",
        "operationId" : "IssueTransaction_PostIssueTransactionAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "issueTransaction",
          "description" : "new issue transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueTransaction"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a newly created issuetransaction",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object is passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the enpoint allows users to update issue transactions",
        "operationId" : "IssueTransaction_PutIssueTransactionAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "issueTransaction",
          "description" : "issue transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueTransaction"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an updated issuetransaction",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object is passed within the request OR the identifier is not pointing to an any issuetransaction"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction/{guid}" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns an issue transaction by id",
        "operationId" : "IssueTransaction_GetIssueTransactionByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue transaction id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issuetransaction by id",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id is not pointing to any issuetransaction"
          }
        }
      },
      "delete" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint allows users to delete issue transactions",
        "operationId" : "IssueTransaction_DeleteIssueTransactionAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue transaction's id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a deleted issuetransaction",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id is not pointing to any issuetransaction"
          }
        }
      }
    },
    "/api/issue-transaction/{guid}/attributes" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns an issue transaction's attributes",
        "operationId" : "IssueTransaction_GetIssueTransactionAttributesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue transaction guid",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue transaction's attributes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id is not pointing to any issuetransaction"
          }
        }
      }
    },
    "/api/issue-transaction/status/{id}" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns issue transactions by issue state",
        "operationId" : "IssueTransaction_GetIssueTransactionByIssueStatusAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue state's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issuetransactions for a passed issue state",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id is not pointing to any issuetransaction"
          }
        }
      }
    },
    "/api/issue-transaction/{transactionId}/initial-status" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns an issue transaction's initial status",
        "operationId" : "IssueTransaction_GetIssueTransactionInitialStatusAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "transaction's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue transaction's initial status",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the transaction id is not pointing any issuetransaction OR the result state is not pointing any issuestate OR the issueid is not pointing any issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction/{transactionId}/default-mails" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns an issue transaction's default mails",
        "operationId" : "IssueTransaction_GetIssueTransactionDefaultMails",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "transaction's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue transaction's default mails",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the transaction id is not pointing any issuetransaction OR the result state is not pointing any issuestate OR the issueid is not pointing any issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction/{transactionId}/default-notifications" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns an issue transaction's default notifications",
        "operationId" : "IssueTransaction_GetIssueTransactionDefaultNotifications",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "transaction's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue transaction's default notifications",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the transaction id is not pointing any issuetransaction OR the result state is not pointing any issuestate OR the issueid is not pointing any issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction/special-transactions" : {
      "get" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint returns the special issue transactions",
        "operationId" : "IssueTransaction_GetSpecialIssueTransactionsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the special issue transactions",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the transaction id is not pointing any issuetransaction OR the result state is not pointing any issuestate OR the issueid is not pointing any issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction/mark-as-executed" : {
      "post" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint executes an issue transaction and updates an existing issue",
        "operationId" : "IssueTransaction_IssueTransactionExecuted",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IssueTransactionExecutedRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an updated issue",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the transaction id is not pointing any issuetransaction OR the result state is not pointing any issuestate OR the issueid is not pointing any issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issue-transaction/{guid}/set-initial-status" : {
      "post" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint enables clients to update an issue transansaction's initial status",
        "operationId" : "IssueTransaction_UpdateIssueTransactionInitialStatusAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue transansaction's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "statusIds",
          "description" : "status identifiers",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-transaction/{guid}/set-attributes" : {
      "post" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint enables clients to update an issue transansaction's attributes",
        "operationId" : "IssueTransaction_UpdateIssueTransactionAttributesAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue transansaction's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "attributeIds",
          "description" : "attribute identifiers",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issue-transaction/{guid}/set-default-notifications" : {
      "post" : {
        "tags" : [ "IssueTransaction" ],
        "summary" : "the endpoint enables clients to update an issue transansaction's default notifications",
        "operationId" : "IssueTransaction_UpdateIssueTransactionDefaultNotificationsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "issue transansaction's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "defaultNotificationIdentifiers",
          "description" : "default notification identifiers",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid",
              "example" : "00000000-0000-0000-0000-000000000000"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/issuetype" : {
      "get" : {
        "tags" : [ "IssueType" ],
        "summary" : "the endpoint returns all issuetypes",
        "operationId" : "IssueType_GetAllIssueTypes",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all issuetypes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "IssueType" ],
        "summary" : "the endpoint creates a new issuetype",
        "operationId" : "IssueType_PostIssueType",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "new issuetype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ISSUETYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a issuetype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed type is null OR the passed object references no issuetype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "IssueType" ],
        "summary" : "the endpoint updates an existing issuetype",
        "operationId" : "IssueType_PutIssueType",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "issuetype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ISSUETYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an updated issuetype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed type is null OR the passed object references no issuetype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/issuetype/{id}" : {
      "get" : {
        "tags" : [ "IssueType" ],
        "summary" : "the endpoint returns a issuetype with the passed identifier",
        "operationId" : "IssueType_GetIssueTypeById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issuetype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a issuetype",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id references no issuetype"
          }
        }
      },
      "delete" : {
        "tags" : [ "IssueType" ],
        "summary" : "the endpoint removes a issuetype with the passed identifier",
        "operationId" : "IssueType_DeleteIssueType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issuetype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted issuetype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier references no issuetype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint returns all locations",
        "operationId" : "Location_GetAllLocationsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all locations",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint creates new locations",
        "operationId" : "Location_PostLocationAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "location",
          "description" : "new location",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[LOCATION]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created location",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed object is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint updates existing locations",
        "operationId" : "Location_PutLocationAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "location",
          "description" : "location",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[LOCATION]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated location",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed object is null OR the passed identifier references no location"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/{id}" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the entdpoint returns the location with the given id",
        "operationId" : "Location_GetLocationByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a locations",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier points to no location"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint enables users to delete locations",
        "operationId" : "Location_DeleteLocationAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted location",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier references no location"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/{id}/watched" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint returns whether an location is watched by the current user",
        "operationId" : "Location_IsLocationWatchedAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/location/search" : {
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint enables user's to search for locations",
        "operationId" : "Location_SearchByStringAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching location",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/user-filter-search/{filterId}" : {
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint returns a set of locations in accordance to the passed filter's identifier conditions",
        "operationId" : "Location_UserFilterLocationSearch",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/location/watched" : {
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "the method returns a set of favoured locations for the current user",
        "operationId" : "Location_GetWatchedLocationsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's favoured locations",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/history" : {
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint returns a number of location history entries in accordance to the passed pagination page",
        "operationId" : "Location_GetLocationHistoryAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's locationhistory",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no location"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint enables user's to delete their location history",
        "operationId" : "Location_ClearHistoryAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/{locationId}/watch" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint enables users to favor locations",
        "operationId" : "Location_WatchLocationAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated location",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no location OR the location was already favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/{locationId}/unwatch" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint enables users to unfavor locations",
        "operationId" : "Location_UnwatchLocationAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated location",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no location OR the location was not favored before"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/{locationId}/availabilities" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint returns a set of availabilities of a location",
        "operationId" : "Location_GetAvailabilitiesByLocationAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all availabilities of the passed location",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no location"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/location/history/{locationId}" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "the endpoint creates a new location history entry",
        "operationId" : "Location_SaveHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "location's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the created issue history entry",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/assignment" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns all unseen mails within the assignment email inbox",
        "operationId" : "Mail_GetAssignmentMailsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all unseen mails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns assignemnt mails in accordance to the passed pagination page",
        "operationId" : "Mail_GetAssignmentMailsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all unseen mails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/incident" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns all unseen mails within the incident email inbox",
        "operationId" : "Mail_GetIncidentMails",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all unseen mails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns incident mails in accordance to the passed pagination page",
        "operationId" : "Mail_GetIncidentMailsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "paginationPage",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all unseen mails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/assignment-by-id" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the method returns a set of mails within the inbox by id",
        "operationId" : "Mail_GetAssignmentMailById",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "mail",
          "description" : "internal mail model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MailModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns set with mails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an mail conversation"
          }
        }
      }
    },
    "/api/mail/incident-by-id" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the method returns a set of mails within the inbox by id",
        "operationId" : "Mail_GetIncidentMailById",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "mail",
          "description" : "internal mail model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MailModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns set with mails",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an mail conversation"
          }
        }
      }
    },
    "/api/mail/incident/{mailId}/seen" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint marks the given mail within the inbox as seen",
        "operationId" : "Mail_MarkIncidentMailAsSeenAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "mailId",
          "in" : "path",
          "description" : "mail message identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content when succeed",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/incident/{mailId}/not-seen" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint marks the given mail within the inbox as seen",
        "operationId" : "Mail_MarkIncidentMailAsNotSeenAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "mailId",
          "in" : "path",
          "description" : "mail message identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content when succeed",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/assignment/{mailId}/seen" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint marks the given mail within the inbox as seen",
        "operationId" : "Mail_MarkAssignmentMailAsSeenAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "mailId",
          "in" : "path",
          "description" : "mail's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content when succeed",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/assignment/{mailId}/not-seen" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint marks the given mail within the inbox as seen",
        "operationId" : "Mail_MarkAssignmentMailAsNotSeenAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "mailId",
          "in" : "path",
          "description" : "mail's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content when succeed",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/assignment/attachement" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns an assigment mail's attachement by file name",
        "operationId" : "Mail_GetAssignmentMailAttachementByFileName",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "map",
          "description" : "model containing mail id and filename",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MailIdFileNameMap"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns file when succeeded",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/incident/attachement" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns an incident mail's attachement by file name",
        "operationId" : "Mail_GetIncidentMailAttachementByFileName",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "map",
          "description" : "model containing mail id and filename",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MailIdFileNameMap"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns file when succeeded",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/{mailId}/{issueId}" : {
      "get" : {
        "tags" : [ "Mail" ],
        "summary" : "the links an email to an issue and marks it as seen",
        "operationId" : "Mail_LinkMailToIssue",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "mailId",
          "in" : "path",
          "description" : "mail's identifier",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content when succeed",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the mail id is not referencing an mail conversation OR the issue id is not referencing an issue"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the method sends a passed mail via the connected smtp server\r\nplease note, that the controller expects multipart/form-data content with a mail (name: 'mail', content type: 'application/json') and optional files",
        "operationId" : "Mail_SendMail",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns no content when succeed",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the mail's receiver is not a valid email address"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "415" : {
            "description" : "If the request is not a mime multipart content"
          },
          "500" : {
            "description" : "If the IMAP server connection OR the mail serialization failed"
          }
        }
      }
    },
    "/api/mail/inline-file" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the endpoint returns an email's inline image by file name",
        "operationId" : "Mail_GetInlineFileByFileName",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "inline image request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InlineImageRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Returns file when succeeded",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing an mail conversation"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/mail/render-msg-file" : {
      "post" : {
        "tags" : [ "Mail" ],
        "summary" : "the method renders a passed msg file to a final html file",
        "operationId" : "Mail_RenderMailMessageAsHtml",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/mail-addresses" : {
      "post" : {
        "tags" : [ "MailAddresses" ],
        "summary" : "the endpoint enables client's to search for known e-mail addresses",
        "operationId" : "MailAddresses_GetEMailAddressesAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "search model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/newsfeed/content" : {
      "post" : {
        "tags" : [ "NewsFeed" ],
        "summary" : "the method returns a newsfeed's content by id",
        "operationId" : "NewsFeed_GetNewsfeedContent",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/newsfeed/subscribe/{id}" : {
      "get" : {
        "tags" : [ "NewsFeed" ],
        "summary" : "the endpoint subscribes a newsfeed to an observable",
        "operationId" : "NewsFeed_SubscribeObservable",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "observable's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/newsfeed/unsubscribe/{id}" : {
      "get" : {
        "tags" : [ "NewsFeed" ],
        "summary" : "the endpoint unsubscribes a newsfeed to an observable",
        "operationId" : "NewsFeed_UnsubscribeObservable",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "observable's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/newsfeed/subscriptions" : {
      "get" : {
        "tags" : [ "NewsFeed" ],
        "summary" : "the endpoint unsubscribes a newsfeed to an observable",
        "operationId" : "NewsFeed_GetUserSubscriptions",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/folder" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method lists a folder's details",
        "operationId" : "Nextcloud_GetFolder",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/folder/create" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method creates a new folder",
        "operationId" : "Nextcloud_PostFolder",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method renames a folder or file",
        "operationId" : "Nextcloud_MoveEntity",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method deletes a folder or file",
        "operationId" : "Nextcloud_DeleteEntity",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/copyFolderContent" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "operationId" : "Nextcloud_CopyFolderContentToAnotherFolder",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/copy" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method copys a file to the new location",
        "operationId" : "Nextcloud_CopyEntity",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/file" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method returns a file",
        "operationId" : "Nextcloud_GetFile",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method returns the request to post a file to nextcloud",
        "operationId" : "Nextcloud_PostFile",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/zip" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "operationId" : "Nextcloud_GetZip",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "downloadToZip",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DownloadToZip"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/file/oo" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method returns the onlyoffice credentials of a file",
        "operationId" : "Nextcloud_RequestOnlyOfficeCredentials",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "nextcloud request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/calendar" : {
      "get" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method lists all calendars for the current user",
        "operationId" : "Nextcloud_GetAllCalendars",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method updates a nextcloud calendar",
        "operationId" : "Nextcloud_PostCalendar",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CalendarModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/calendar/content" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method lists the a calendar's details",
        "operationId" : "Nextcloud_GetCalendarDetails",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/calendar/event" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method updates a nextcloud calendar event",
        "operationId" : "Nextcloud_PostCalendarEvent",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CalendarEntryModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method deletes a nextcloud calendar event",
        "operationId" : "Nextcloud_DeleteCalendarEvent",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NextCloudSearchRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/nextcloud/log/pagination" : {
      "post" : {
        "tags" : [ "Nextcloud" ],
        "summary" : "the method returns a pagination result containing nextcloud reauthentication log entries",
        "operationId" : "Nextcloud_GetNextcloudReauthenticationLogEntries",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all access prevented log entries",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/oauth2/start" : {
      "get" : {
        "tags" : [ "OAuthentification" ],
        "summary" : "the method redirects the client to the access side of the provider",
        "operationId" : "OAuthentification_Start",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "query",
          "description" : "given userid",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "301" : {
            "description" : "redirect the client"
          }
        }
      }
    },
    "/oauth2/callback" : {
      "get" : {
        "tags" : [ "OAuthentification" ],
        "summary" : "the method is called by the authorization provider and sends the credentials to the",
        "operationId" : "OAuthentification_Callback",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "description" : "given authorization code",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "given state",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Close the client tab",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no state was passed within the request"
          }
        }
      }
    },
    "/oauth2/reauthorize" : {
      "get" : {
        "tags" : [ "OAuthentification" ],
        "summary" : "the method reauthorizes the current users nextcloud credentials",
        "operationId" : "OAuthentification_Reauthorize",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reauthorization succeed",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/offer" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint provides all offeres",
        "operationId" : "Offer_GetAllOfferes",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all offeres",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint enables user's to create new offeres",
        "operationId" : "Offer_PostOfferAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "offer",
          "description" : "new offer",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[OFFER]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created offer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed offer is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint enables user's to update offeres",
        "operationId" : "Offer_PutOfferAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "offer",
          "description" : "offer",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[OFFER]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated offer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed offer is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/{id}" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint returns offeres by id",
        "operationId" : "Offer_GetOfferByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all offeres",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an offer"
          }
        }
      },
      "delete" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint enables user's to delete offeres",
        "operationId" : "Offer_DeleteOfferAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted offer",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any offer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/{offerId}/create-ordered-items" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint enables clients to create issue items for an offer",
        "operationId" : "Offer_CreateOrderedIssueItems",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "offerId",
          "in" : "path",
          "description" : "offer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of issueitems",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no offer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/{offerId}/offer-items" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint returns all items for a given offer",
        "operationId" : "Offer_GetOfferItemsByOffer",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "offerId",
          "in" : "path",
          "description" : "offer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of offeritems",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no offer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/newly-created/{number}" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the method returns the recent created offers",
        "operationId" : "Offer_GetNewlyCreatedOffers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "number of offers",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of offers",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/downloadoffer/{offerId}" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the method returns the offer's pdf file",
        "operationId" : "Offer_DownloadAssignmentFromReportServer",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "offerId",
          "in" : "path",
          "description" : "offer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the pdf file",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no offer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/generateId" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint generates the next id for an offer",
        "operationId" : "Offer_GenerateOfferId",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the next offernumber",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/search" : {
      "post" : {
        "tags" : [ "Offer" ],
        "summary" : "the method searches for offers matching the passed search",
        "operationId" : "Offer_SearchByString",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "search request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of offers",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/search/{filterId}" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint returns a set of offers in accordance to the passed filter's identifier conditions",
        "operationId" : "Offer_AdvancedLocationSearch",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/offer/current" : {
      "get" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint returns all offers that are currently important for the user",
        "operationId" : "Offer_GetCurrentOffers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all current offers",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer/transform-offer-to-issue" : {
      "post" : {
        "tags" : [ "Offer" ],
        "summary" : "the endpoint enables user's to copy an offer's data into an issue and link them",
        "operationId" : "Offer_CopyOfferToIssue",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "request",
          "description" : "the user's request containing the offer's identifier and the issue's data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TransformOfferToIssueRequest"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the created issue",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no offer"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-item" : {
      "get" : {
        "tags" : [ "OfferItem" ],
        "summary" : "the endpoint returns all issue items from the database",
        "operationId" : "OfferItem_GetAllOfferItems",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all offeritems",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "OfferItem" ],
        "summary" : "the endpoint persists a new offeritem to the database",
        "operationId" : "OfferItem_PostOfferItem",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "item",
          "description" : "new offeritem",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[OFFERITEM]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Returns the newly created offeritem",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed item is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "OfferItem" ],
        "summary" : "the endpoint updates an existing offeritem",
        "operationId" : "OfferItem_PutOfferItem",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "item",
          "description" : "offeritem",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[OFFERITEM]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated offeritem",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed item is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-item/{id}" : {
      "get" : {
        "tags" : [ "OfferItem" ],
        "summary" : "the endpoint returns an offeritem by id",
        "operationId" : "OfferItem_GetOfferItemById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offeritem's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an offeritem",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an offeritem"
          }
        }
      },
      "delete" : {
        "tags" : [ "OfferItem" ],
        "summary" : "the endpoint removes an offeritem from the database",
        "operationId" : "OfferItem_DeleteOfferItem",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offeritem's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated offeritem",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not referencing an offeritem"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-status" : {
      "get" : {
        "tags" : [ "OfferState" ],
        "summary" : "the endpoint provides all offerstates",
        "operationId" : "OfferState_GetAllOfferStates",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all offerstates",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "OfferState" ],
        "summary" : "the endpoint enables user's to create new offerstates",
        "operationId" : "OfferState_PostOfferState",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "state",
          "description" : "new offerstate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OFFERSTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created offerstate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed offerstate is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "OfferState" ],
        "summary" : "the endpoint enables user's to update offerstates",
        "operationId" : "OfferState_PutOfferState",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "state",
          "description" : "offerstate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OFFERSTATE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated offerstate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed offerstate is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-status/{id}" : {
      "get" : {
        "tags" : [ "OfferState" ],
        "summary" : "the endpoint returns offerstates by id",
        "operationId" : "OfferState_GetOfferStateById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offerstate's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all offerstates",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an offerstate"
          }
        }
      },
      "delete" : {
        "tags" : [ "OfferState" ],
        "summary" : "the endpoint enables user's to delete offerstates",
        "operationId" : "OfferState_DeleteOfferState",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offerstate's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created offerstate",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any offerstate"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-transaction" : {
      "get" : {
        "tags" : [ "OfferTransaction" ],
        "summary" : "the endpoint returns all offer transactions of the database",
        "operationId" : "OfferTransaction_GetOfferTransactions",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all offer transactions",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-transaction/{transactionId}" : {
      "get" : {
        "tags" : [ "OfferTransaction" ],
        "summary" : "the endpoint returns a offr transaction by identifier",
        "operationId" : "OfferTransaction_GetOfferTransactionById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an offer transaction",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/offer-transaction/state/{id}" : {
      "get" : {
        "tags" : [ "OfferTransaction" ],
        "summary" : "the endpoint returns offer transactions by offer state",
        "operationId" : "OfferTransaction_GetIssueTransactionByIssueState",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "offer state's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an offertransactions for a passed offer state",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the id is not pointing to any offertransaction"
          }
        }
      }
    },
    "/api/priority" : {
      "get" : {
        "tags" : [ "Priority" ],
        "summary" : "the endpoint provides all priorities",
        "operationId" : "Priority_GetAllPriorities",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all priorities",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Priority" ],
        "summary" : "the endpoint enables user's to create new priorities",
        "operationId" : "Priority_PostPriority",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "priority",
          "description" : "new priority",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PRIORITY"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created priority",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed priority is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Priority" ],
        "summary" : "the endpoint enables user's to update priorities",
        "operationId" : "Priority_PutPriority",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "priority",
          "description" : "priority",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PRIORITY"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated priority",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed priority is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/priority/{id}" : {
      "get" : {
        "tags" : [ "Priority" ],
        "summary" : "the endpoint returns priorities by id",
        "operationId" : "Priority_GetPriorityById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "priority's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all priorities",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an priority"
          }
        }
      },
      "delete" : {
        "tags" : [ "Priority" ],
        "summary" : "the endpoint enables user's to delete priorities",
        "operationId" : "Priority_DeletePriority",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "priority's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted priority",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any priority"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/product" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint returns all products",
        "operationId" : "Product_GetAllProductsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint persists a new product to the database",
        "operationId" : "Product_PostProductAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "product",
          "description" : "new product",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[PRODUCT]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint updates an existing product",
        "operationId" : "Product_PutProductAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "product",
          "description" : "new product",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericPostRequest[PRODUCT]"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product/{id}" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint returns a product with the given id",
        "operationId" : "Product_GetProductByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "product's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint removes a product from the database",
        "operationId" : "Product_DeleteProductAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "product's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product/audit" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "the method returns the current audit view according to the given page",
        "operationId" : "Product_GetAudit",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "requested page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product/audit/{productId}" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "the method returns the current audit view according to the given page and the given product",
        "operationId" : "Product_GetAuditForProduct",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "description" : "product's id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "page",
          "description" : "requested page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product/{productId}/previewpicture" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint enables user's to request a product's preview picture",
        "operationId" : "Product_GetPreviewPictureForProduct",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "description" : "product's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product/{productId}/pictures" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint enables user's to request all pictures of a product",
        "operationId" : "Product_GetAllPicturesForProduct",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "description" : "product's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product/search" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "the method searches for products matching the passed search",
        "operationId" : "Product_Search",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "search request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of products",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/product/group/{id}" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "the endpoint returns all products for a passed group identifier",
        "operationId" : "Product_GetProductsByGroup",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of products",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          }
        }
      }
    },
    "/api/productgroup" : {
      "get" : {
        "tags" : [ "ProductGroup" ],
        "summary" : "the endpoint provides all productgroups",
        "operationId" : "ProductGroup_GetAllProductGroups",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all productgroups",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "ProductGroup" ],
        "summary" : "the endpoint enables user's to create new productgroups",
        "operationId" : "ProductGroup_PostProductGroup",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "description" : "new productgroup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PRODUCTGROUP"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created productgroup",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed productgroup is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "ProductGroup" ],
        "summary" : "the endpoint enables user's to update productgroups",
        "operationId" : "ProductGroup_PutProductGroup",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "description" : "productgroup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PRODUCTGROUP"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated productgroup",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed productgroup is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/productgroup/{id}" : {
      "get" : {
        "tags" : [ "ProductGroup" ],
        "summary" : "the endpoint returns productgroups by id",
        "operationId" : "ProductGroup_GetProductGroupById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "productgroup's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an productgroup",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an productgroup"
          }
        }
      },
      "delete" : {
        "tags" : [ "ProductGroup" ],
        "summary" : "the endpoint enables user's to delete productgroups",
        "operationId" : "ProductGroup_DeleteProductGroup",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "availability's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted productgroup",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any productgroup"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/product-picture" : {
      "get" : {
        "tags" : [ "ProductPicture" ],
        "summary" : "the endpoint returns all productpictures",
        "operationId" : "ProductPicture_GetAllProductPictures",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ProductPicture" ],
        "summary" : "the endpoint enables users to create productpictures",
        "operationId" : "ProductPicture_PostProductPicture",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "productPicture",
          "description" : "new productpicture",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PRODUCTPICTURE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ProductPicture" ],
        "summary" : "the endpoint enables users to update productpictures",
        "operationId" : "ProductPicture_PutProductPicture",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "productPicture",
          "description" : "productpicture",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PRODUCTPICTURE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product-picture/id" : {
      "get" : {
        "tags" : [ "ProductPicture" ],
        "summary" : "the endpoint enables users to load a product picture by identifier",
        "operationId" : "ProductPicture_GetProductPictureById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "productpicture's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/product-picture/{id}" : {
      "delete" : {
        "tags" : [ "ProductPicture" ],
        "summary" : "the endpoint enables users to delete productpictures",
        "operationId" : "ProductPicture_DeleteProductPictureAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "productpicture's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/project/search" : {
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "the endpoint enables user's to search for projects",
        "operationId" : "Project_SearchByString",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "search",
          "description" : "user's request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the matching projects",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/project/history" : {
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "the endpoint returns a number of project history entries in accordance to the passed pagination page",
        "operationId" : "Project_GetProjectHistory",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "current page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the current user's project history",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no project"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Project" ],
        "summary" : "the endpoint enables user's to delete their project history",
        "operationId" : "Project_ClearHistory",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "History cleared",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/project/watched" : {
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "the method returns a set of watched project for the current user",
        "operationId" : "Project_GetWatchedProjects",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's watched projects",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/project/assigned" : {
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "the method returns a set of assigned projects for the current user",
        "operationId" : "Project_GetAssignedProjects",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's assigned projects",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/project/unseen" : {
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "the method returns a set of unseen projects for the current user",
        "operationId" : "Project_GetUnseenProjects",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "page",
          "description" : "pagination page",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaginationPage"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user's unseen projects",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "409" : {
            "description" : "If the issuetype is not registered correctly within the database"
          }
        }
      }
    },
    "/api/report-server/offer-report/{offerId}" : {
      "get" : {
        "tags" : [ "ReportServer" ],
        "summary" : "the endpoint enables user's to download the offer report from the report server",
        "operationId" : "ReportServer_DownloadOfferReport",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "offerId",
          "in" : "path",
          "description" : "offer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/report-server/issue-conclusion/{issueId}" : {
      "get" : {
        "tags" : [ "ReportServer" ],
        "summary" : "the endpoint enables user's to download the issue conclusion from the report server",
        "operationId" : "ReportServer_DownloadIssueConclusion",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/report-server/operation-protocol/{issueId}" : {
      "get" : {
        "tags" : [ "ReportServer" ],
        "summary" : "the endpoint enables user's to download the operation log from the report server",
        "operationId" : "ReportServer_DownloadOperationLog",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/role" : {
      "get" : {
        "tags" : [ "Role" ],
        "summary" : "the endpoint returns all roles of the database",
        "operationId" : "Role_GetRolesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Role" ],
        "summary" : "the enpoint allows users to create new roles",
        "operationId" : "Role_PostRoleAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "role",
          "description" : "new role",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoleModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Role" ],
        "summary" : "the enpoint allows users to update roles",
        "operationId" : "Role_UpdateRoleAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "role",
          "description" : "role",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoleModel"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/role/{id}" : {
      "get" : {
        "tags" : [ "Role" ],
        "summary" : "the endpoint returns a role by id",
        "operationId" : "Role_GetRoleByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "role id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Role" ],
        "summary" : "the endpoint allows users to delete roles",
        "operationId" : "Role_DeleteRoleAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "role's id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/role-right" : {
      "get" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the method returns all current user's rights",
        "operationId" : "RoleRight_GetCurrentUsersRoleRights",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all user's rolerights",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/role-right/current/has-rights" : {
      "post" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the endpoint enables client's to request permissions",
        "operationId" : "RoleRight_CurrentUserHasRoleRightsAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "rules",
          "description" : "rules",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/role-right/{id}" : {
      "get" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the method returns a role's rights",
        "operationId" : "RoleRight_GetRoleRightsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the method returns a role's rights",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a set of a user's rolerights",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not referencing any role"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/role-right/permit/{roleId}/{ruleId}" : {
      "get" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the enables user's to permit a rule for a role",
        "operationId" : "RoleRight_PermitRoleRightAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "role's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "rule's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a updated roleright",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the role's identifier is not referencing any role OR the rule's identifier is not referencing any rule"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/role-right/refuse/{roleId}/{ruleId}" : {
      "get" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the enables user's to refuse a rule for a role",
        "operationId" : "RoleRight_RefuseRoleRightAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "role's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "rule's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a updated roleright",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the role's identifier is not referencing any role OR the rule's identifier is not referencing any rule"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/role-right/permit-all/{roleId}" : {
      "get" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the enables user's to permit all rules for a given role",
        "operationId" : "RoleRight_PermitAllRoleRightsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "role's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the role's identifier is not referencing any role"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/role-right/permit-all-necessary/{roleId}" : {
      "get" : {
        "tags" : [ "RoleRight" ],
        "summary" : "the enables user's to permit all necessary rules for a given role",
        "operationId" : "RoleRight_PermitAllNecessaryRoleRightsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "role's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns no content",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the role's identifier is not referencing any role"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/rule" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "the method returns all rules within rule/group sets",
        "operationId" : "Rule_GetAllRulesAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/rule/{id}" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "the endpoint returns rules by id",
        "operationId" : "Rule_GetRuleByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "rule's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a rule with the passed identifier",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing a rule"
          }
        }
      }
    },
    "/api/rule/bycode/{code}" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "the endpoint returns rules by code",
        "operationId" : "Rule_GetRuleByCodeAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "rule's code",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a rule with the passed code",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the code is not referencing a rule"
          }
        }
      }
    },
    "/api/rule/by-group/{groupId}" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "the method returns all rules for a rule group",
        "operationId" : "Rule_GetRulesByGroupAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "rule group's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/rule/without-group" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "the method returns all rules without a group",
        "operationId" : "Rule_GetRulesWithoutGroupAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/rule/rule" : {
      "post" : {
        "tags" : [ "Rule" ],
        "summary" : "the endpoint enables users to create rules",
        "operationId" : "Rule_PostRuleAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "rule",
          "description" : "new rule",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RULES"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Rule" ],
        "summary" : "the endpoint enables users to update rules",
        "operationId" : "Rule_PutRuleAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "rule",
          "description" : "rule",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RULES"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/rule/rule/{id}" : {
      "delete" : {
        "tags" : [ "Rule" ],
        "summary" : "the endpoint enables user's to delete existing rules",
        "operationId" : "Rule_DeleteRuleAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "rule's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/setting" : {
      "get" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint returns all settings",
        "operationId" : "Setting_GetAllSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all settings",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint enables user's to create new settings",
        "operationId" : "Setting_PostSetting",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "setting",
          "description" : "new setting",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SETTING"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object was passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint enables user's to update settings",
        "operationId" : "Setting_PutSetting",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "setting",
          "description" : "setting",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SETTING"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object was passed within the request OR the identifier is not pointing to any setting"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/setting/current" : {
      "get" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint returns the current user's settings",
        "operationId" : "Setting_GetCurrentUsersSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns current user's settings",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint enables user's to create own new settings",
        "operationId" : "Setting_PostOwnSetting",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "setting",
          "description" : "new setting",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SETTING"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object was passed within the request"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint enables user's to update an user's own settings",
        "operationId" : "Setting_PutOwnSetting",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "setting",
          "description" : "setting",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SETTING"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If no object was passed within the request OR the identifier is not pointing to any setting OR the setting is related to another user"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/setting/current/{settingName}" : {
      "get" : {
        "tags" : [ "Setting" ],
        "summary" : "the endpoint returns the current user's settings",
        "operationId" : "Setting_GetCurrentUsersSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "settingName",
          "in" : "path",
          "description" : "setting name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns current user's settings",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/setting/{id}" : {
      "get" : {
        "tags" : [ "Setting" ],
        "summary" : "the method returns a setting with the passed identifier",
        "operationId" : "Setting_GetSettingById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "setting's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any setting"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "delete" : {
        "tags" : [ "Setting" ],
        "summary" : "the method removes a setting with the passed identifier",
        "operationId" : "Setting_DeleteSettingById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "setting's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any setting"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/setting/current/{id}" : {
      "delete" : {
        "tags" : [ "Setting" ],
        "summary" : "the method removes an user's own setting with the passed identifier",
        "operationId" : "Setting_DeleteOwnSettingById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "setting's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted setting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the identifier is not pointing any setting OR the setting is related to another user"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/signature" : {
      "get" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint provides all signatures",
        "operationId" : "Signature_GetAllSignatures",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all signatures",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint enables user's to create new signatures",
        "operationId" : "Signature_PostSignature",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "signature",
          "description" : "new signature",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SIGNATURE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created signature",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed signature is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint enables user's to update signatures",
        "operationId" : "Signature_PutSignature",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "signature",
          "description" : "signature",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SIGNATURE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated signature",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed signature is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/signature/{id}" : {
      "get" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint returns signatures by id",
        "operationId" : "Signature_GetSignatureById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "signature's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all signatures",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an signature"
          }
        }
      },
      "delete" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint enables user's to delete signatures",
        "operationId" : "Signature_DeleteSignature",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "signature's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted signature",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any signature"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/signature/byuser/{userId}" : {
      "get" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint provides all signatures of an user",
        "operationId" : "Signature_GetSignaturesForUser",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all signatures",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/signature/{userId}" : {
      "post" : {
        "tags" : [ "Signature" ],
        "summary" : "the endpoint enables user's to create new signatures and relate them to the given user",
        "operationId" : "Signature_PostSignatureAndRelateToUser",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "signature",
          "description" : "new signature",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SIGNATURE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created signature",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed signature is null OR the passed user id is not referencing any user"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/special-views/cancelled-contracts" : {
      "get" : {
        "tags" : [ "SpecialViews" ],
        "operationId" : "SpecialViews_GetContractsAllItemsCancelled",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "the endpoint returns the current user",
        "operationId" : "User_GetCurrentUser",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user/internal-users" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "the method returns all (not disabled) AMS internal users",
        "operationId" : "User_GetAMSUsers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user/other-users-with-widgettype/{widgetType}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "the endpoint returns all users (except the current user) using at least one widget of the passed type",
        "operationId" : "User_GetOtherUsersWithWidgetOfType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "widgetType",
          "in" : "path",
          "description" : "widget type",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user/{userId}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "the method returns a user by identifier",
        "operationId" : "User_GetUserById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user-customer" : {
      "get" : {
        "tags" : [ "UserCustomer" ],
        "summary" : "the endpoint enables client's to retrieve the current user's customers",
        "operationId" : "UserCustomer_GetCurrentCustomers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user-customer/customers-by-user-id/{userId}" : {
      "get" : {
        "tags" : [ "UserCustomer" ],
        "summary" : "the endpoint enables client's to retrieve the an user's customers",
        "operationId" : "UserCustomer_GetUserCustomers",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user-customer/{id}" : {
      "get" : {
        "tags" : [ "UserCustomer" ],
        "summary" : "the endpoint returns a user's customer for the passed id (only works, if both are linked)",
        "operationId" : "UserCustomer_GetUserLinkedCustomerById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a customer",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      }
    },
    "/api/user-customer/{id}/contracts" : {
      "get" : {
        "tags" : [ "UserCustomer" ],
        "summary" : "the endpoint returns a user's customer's contracts for the passed id (only works, if both are linked)",
        "operationId" : "UserCustomer_GetUserLinkedCustomerContractsById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "customer's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a customer",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      }
    },
    "/api/user-issue/{id}" : {
      "get" : {
        "tags" : [ "UserIssue" ],
        "summary" : "the endpoint returns a user's issue for the passed id (only works, if both are linked)",
        "operationId" : "UserIssue_GetUserLinkedIssueById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "issue's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an issue",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the passed identifier points to no customer"
          }
        }
      }
    },
    "/api/widget" : {
      "get" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint provides all widgets",
        "operationId" : "Widget_GetAllWidgetsAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgets",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint enables users to create new widgets",
        "operationId" : "Widget_PostWidget",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "widget",
          "description" : "widget object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGET"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Widget created",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint enables users to update existing widgets",
        "operationId" : "Widget_PutWidgetAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "widget",
          "description" : "widget",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGET"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Widget updated",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/widget/{id}" : {
      "get" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint returns widgets by id",
        "operationId" : "Widget_GetWidgetByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "widgettype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgets",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an widgettype"
          }
        }
      },
      "delete" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint enables user's to remove existing widgets from the database",
        "operationId" : "Widget_DeleteWidget",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the widget",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted widget",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier points to no widget"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/widget/current" : {
      "get" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint returns the current user's widgets",
        "operationId" : "Widget_GetCurrentUserWidgets",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgets from the current user",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an user"
          }
        }
      }
    },
    "/api/widget/user/{username}" : {
      "get" : {
        "tags" : [ "Widget" ],
        "summary" : "the endpoint returns all widgets for a specified user",
        "operationId" : "Widget_GetAllWidgetsForUser",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "user's name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgets from the current user",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an user"
          }
        }
      }
    },
    "/api/rolefilter" : {
      "get" : {
        "tags" : [ "WidgetRoleFilter" ],
        "summary" : "the endpoint provides all rolefilters",
        "operationId" : "WidgetRoleFilter_GetAllRoleFilters",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all rolefilters",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "WidgetRoleFilter" ],
        "summary" : "the endpoint enables role's to create new rolefilters",
        "operationId" : "WidgetRoleFilter_PostRoleFilter",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "rolefilter",
          "description" : "new rolefilter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETROLEFILTER"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created rolefilter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed rolefilter is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "WidgetRoleFilter" ],
        "summary" : "the endpoint enables role's to update rolefilters",
        "operationId" : "WidgetRoleFilter_PutRoleFilter",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "rolefilter",
          "description" : "rolefilter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETROLEFILTER"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated rolefilter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed rolefilter is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/rolefilter/{id}" : {
      "get" : {
        "tags" : [ "WidgetRoleFilter" ],
        "summary" : "the endpoint returns rolefilters by id",
        "operationId" : "WidgetRoleFilter_GetRoleFilterById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "rolefilter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all rolefilters",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an rolefilter"
          }
        }
      },
      "delete" : {
        "tags" : [ "WidgetRoleFilter" ],
        "summary" : "the endpoint enables role's to delete rolefilters",
        "operationId" : "WidgetRoleFilter_DeleteRoleFilter",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "rolefilter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created rolefilter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any rolefilter"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/widget-setting" : {
      "get" : {
        "tags" : [ "WidgetSetting" ],
        "summary" : "the endpoint provides all widgetsettings",
        "operationId" : "WidgetSetting_GetAllWidgetSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgetsettings",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "WidgetSetting" ],
        "summary" : "the endpoint enables user's to create new widgetsettings",
        "operationId" : "WidgetSetting_PostWidgetSetting",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "widgetsetting",
          "description" : "new widgetsetting",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETSETTING"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created widgetsetting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed widgetsetting is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "WidgetSetting" ],
        "summary" : "the endpoint enables user's to update widgetsettings",
        "operationId" : "WidgetSetting_PutWidgetSetting",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "widgetsetting",
          "description" : "widgetsetting",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETSETTING"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated widgetsetting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed widgetsetting is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/widget-setting/{id}" : {
      "get" : {
        "tags" : [ "WidgetSetting" ],
        "summary" : "the endpoint returns widgetsettings by id",
        "operationId" : "WidgetSetting_GetWidgetSettingById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "widgetsetting's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgetsettings",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an widgetsetting"
          }
        }
      },
      "delete" : {
        "tags" : [ "WidgetSetting" ],
        "summary" : "the endpoint enables user's to delete widgetsettings",
        "operationId" : "WidgetSetting_DeleteWidgetSetting",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "widgetsetting's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created widgetsetting",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any widgetsetting"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/widget-type" : {
      "get" : {
        "tags" : [ "WidgetType" ],
        "summary" : "the endpoint provides all widgettypes",
        "operationId" : "WidgetType_GetAllWidgetTypes",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgettypes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "WidgetType" ],
        "summary" : "the endpoint enables user's to create new widgettypes",
        "operationId" : "WidgetType_PostWidgetType",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "new widgettype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETTYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created widgettype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed widgettype is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "WidgetType" ],
        "summary" : "the endpoint enables user's to update widgettypes",
        "operationId" : "WidgetType_PutWidgetType",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "type",
          "description" : "widgettype",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETTYPE"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated widgettype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed widgettype is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/widget-type/{id}" : {
      "get" : {
        "tags" : [ "WidgetType" ],
        "summary" : "the endpoint returns widgettypes by id",
        "operationId" : "WidgetType_GetWidgetTypeById",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "widgettype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all widgettypes",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          },
          "404" : {
            "description" : "If the identifier is not referencing an widgettype"
          }
        }
      },
      "delete" : {
        "tags" : [ "WidgetType" ],
        "summary" : "the endpoint enables user's to delete widgettypes",
        "operationId" : "WidgetType_DeleteWidgetType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "widgettype's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created widgettype",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any widgettype"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/user-filter" : {
      "get" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint provides all userfilters",
        "operationId" : "WidgetUserFilter_GetAllUserFiltersAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all userfilters",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "post" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint enables user's to create new userfilters",
        "operationId" : "WidgetUserFilter_PostUserFilterAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "userfilter",
          "description" : "new userfilter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETUSERFILTER"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created userfilter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed userfilter is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      },
      "put" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint enables user's to update userfilters",
        "operationId" : "WidgetUserFilter_PutUserFilterAsync",
        "consumes" : [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "userfilter",
          "description" : "userfilter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WIDGETUSERFILTER"
          }
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the updated userfilter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed userfilter is null"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/user-filter/{id}" : {
      "get" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint returns userfilters by id",
        "operationId" : "WidgetUserFilter_GetUserFilterByIdAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "userfilter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all userfilters",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "404" : {
            "description" : "If the identifier is not referencing an userfilter"
          }
        }
      },
      "delete" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint enables user's to delete userfilters",
        "operationId" : "WidgetUserFilter_DeleteUserFilterAsync",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "userfilter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created userfilter",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "If the passed identifier is not pointing to any userfilter"
          },
          "401" : {
            "description" : "If the requesting user has no valid login (e.g. expired token)"
          },
          "403" : {
            "description" : "If the requesting user has no access rolerights"
          }
        }
      }
    },
    "/api/user-filter/{filterId}/share-filter/{userId}" : {
      "get" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint enables clients to share a user filter with another user",
        "operationId" : "WidgetUserFilter_ShareFilterWithUser",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "filter'S identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "user's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/user-filter/{filterId}/update-sorting/{sortingAttribute}/{sortDesc}" : {
      "get" : {
        "tags" : [ "WidgetUserFilter" ],
        "summary" : "the endpoint enables clients to change an user filter's sorting",
        "operationId" : "WidgetUserFilter_UpdateUserFilterSorting",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "path",
          "description" : "user filter's identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortingAttribute",
          "in" : "path",
          "description" : "sorting attribute",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sortDesc",
          "in" : "path",
          "description" : "sort desc",
          "required" : true,
          "type" : "boolean"
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "access token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/token" : {
      "post" : {
        "tags" : [ "Auth" ],
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "grant_type",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "username",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ]
      }
    }
  },
  "definitions" : {
    "PaginationPage" : {
      "type" : "object",
      "properties" : {
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ACCESSDENIEDLOG" : {
      "type" : "object",
      "properties" : {
        "logid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "logusername" : {
          "type" : "string"
        },
        "logtime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "logrules" : {
          "type" : "string"
        },
        "logcomponent" : {
          "type" : "string"
        }
      }
    },
    "CancellationToken" : {
      "type" : "object",
      "properties" : {
        "isCancellationRequested" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "canBeCanceled" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "waitHandle" : {
          "readOnly" : true,
          "$ref" : "#/definitions/WaitHandle"
        }
      }
    },
    "WaitHandle" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : "object",
          "properties" : { }
        },
        "safeWaitHandle" : {
          "$ref" : "#/definitions/SafeWaitHandle"
        }
      }
    },
    "SafeWaitHandle" : {
      "type" : "object",
      "properties" : {
        "isInvalid" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "isClosed" : {
          "type" : "boolean",
          "readOnly" : true
        }
      }
    },
    "UserModel" : {
      "type" : "object",
      "required" : [ "password", "userName" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "the user's name"
        },
        "userName" : {
          "type" : "string",
          "description" : "the user's name"
        },
        "password" : {
          "type" : "string",
          "description" : "the user's password",
          "minLength" : 6,
          "maxLength" : 100
        },
        "confirmPassword" : {
          "type" : "string",
          "description" : "the password confirmation"
        },
        "eMail" : {
          "type" : "string",
          "description" : "the email of the current user"
        },
        "roleIds" : {
          "type" : "array",
          "description" : "the list of role ids related to the user",
          "items" : {
            "type" : "string"
          }
        },
        "initials" : {
          "type" : "string",
          "description" : "the user's initials"
        }
      },
      "description" : "the class contains a usermodel for user registration"
    },
    "ChangePasswordModel" : {
      "type" : "object",
      "required" : [ "oldPassword" ],
      "properties" : {
        "oldPassword" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 100
        },
        "newPassword" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 100
        },
        "confirmPassword" : {
          "type" : "string"
        }
      }
    },
    "SIGNATURE" : {
      "type" : "object",
      "properties" : {
        "signatureid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "signaturedata" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "signaturemediatype" : {
          "type" : "string"
        },
        "aspNetUsers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetUsers"
          }
        }
      }
    },
    "AspNetUsers" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "emailConfirmed" : {
          "type" : "boolean"
        },
        "passwordHash" : {
          "type" : "string"
        },
        "securityStamp" : {
          "type" : "string"
        },
        "phoneNumber" : {
          "type" : "string"
        },
        "phoneNumberConfirmed" : {
          "type" : "boolean"
        },
        "twoFactorEnabled" : {
          "type" : "boolean"
        },
        "lockoutEndDateUtc" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lockoutEnabled" : {
          "type" : "boolean"
        },
        "accessFailedCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userName" : {
          "type" : "string"
        },
        "initials" : {
          "type" : "string"
        },
        "profilePicture" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "bannerImage" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "profilePictureMediaType" : {
          "type" : "string"
        },
        "bannerPictureMediaType" : {
          "type" : "string"
        },
        "signaturePicture" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "signatureMediaType" : {
          "type" : "string"
        },
        "customerOnly" : {
          "type" : "boolean"
        },
        "aspNetUserLogins" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetUserLogins"
          }
        },
        "contract" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACT"
          }
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        },
        "issuetransformation" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUETRANSFORMATION"
          }
        },
        "message" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MESSAGE"
          }
        },
        "messagE1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MESSAGE"
          }
        },
        "notification" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NOTIFICATION"
          }
        },
        "rolefilterusersequencenumber" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ROLEFILTERUSERSEQUENCENUMBER"
          }
        },
        "setting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SETTING"
          }
        },
        "userdisabled" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/USERDISABLED"
          }
        },
        "userissueconnection" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/USERISSUECONNECTION"
          }
        },
        "widget" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGET"
          }
        },
        "widgetuserfilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETUSERFILTER"
          }
        },
        "aspNetRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetRoles"
          }
        },
        "customer" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CUSTOMER"
          }
        },
        "signature" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SIGNATURE"
          }
        }
      }
    },
    "AspNetUserLogins" : {
      "type" : "object",
      "properties" : {
        "loginProvider" : {
          "type" : "string"
        },
        "providerKey" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        }
      }
    },
    "CONTRACT" : {
      "type" : "object",
      "properties" : {
        "contractid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contractdesc" : {
          "type" : "string"
        },
        "contractstate" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contracttype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contractcustomer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contractnumber" : {
          "type" : "string"
        },
        "contractcreator" : {
          "type" : "string"
        },
        "contractcreation" : {
          "type" : "string",
          "format" : "date-time"
        },
        "contractnote" : {
          "type" : "string"
        },
        "contractlocation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "contractstatE1" : {
          "$ref" : "#/definitions/CONTRACTSTATE"
        },
        "contracttypE1" : {
          "$ref" : "#/definitions/CONTRACTTYPE"
        },
        "customer" : {
          "$ref" : "#/definitions/CUSTOMER"
        },
        "location" : {
          "$ref" : "#/definitions/LOCATION"
        },
        "contractitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACTITEM"
          }
        },
        "issueitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUEITEM"
          }
        },
        "offeritem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERITEM"
          }
        }
      }
    },
    "ISSUE" : {
      "type" : "object",
      "properties" : {
        "anchestors" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "followers" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "issueid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuecreator" : {
          "type" : "string"
        },
        "issuecreation" : {
          "type" : "string",
          "format" : "date-time"
        },
        "issuecustomer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuepriority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuecategory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuedesc" : {
          "type" : "string"
        },
        "issuestate" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuetitle" : {
          "type" : "string"
        },
        "folderlocation" : {
          "type" : "string"
        },
        "issueescalation" : {
          "type" : "string",
          "format" : "date-time"
        },
        "issuenumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuetype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "changetype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "commercialcontactpersonalid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "localcontactpersonalid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuenote" : {
          "type" : "string"
        },
        "laststatuschange" : {
          "type" : "string",
          "format" : "date-time"
        },
        "filesexported" : {
          "type" : "boolean"
        },
        "concurrencystamp" : {
          "type" : "string"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "changetypE1" : {
          "$ref" : "#/definitions/CHANGETYPE"
        },
        "contactpersonal" : {
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "contactpersonaL1" : {
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "customer" : {
          "$ref" : "#/definitions/CUSTOMER"
        },
        "email" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EMAIL"
          }
        },
        "issuecategorY1" : {
          "$ref" : "#/definitions/ISSUECATEGORY"
        },
        "issuestatE1" : {
          "$ref" : "#/definitions/ISSUESTATE"
        },
        "issuetypE1" : {
          "$ref" : "#/definitions/ISSUETYPE"
        },
        "priority" : {
          "$ref" : "#/definitions/PRIORITY"
        },
        "issueitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUEITEM"
          }
        },
        "issuetransformation" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUETRANSFORMATION"
          }
        },
        "issuetransformatioN1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUETRANSFORMATION"
          }
        },
        "offer" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFER"
          }
        },
        "offeritem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERITEM"
          }
        },
        "userissueconnection" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/USERISSUECONNECTION"
          }
        }
      }
    },
    "ISSUETRANSFORMATION" : {
      "type" : "object",
      "properties" : {
        "initialissue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "resultissue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "executor" : {
          "type" : "string"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "issue" : {
          "$ref" : "#/definitions/ISSUE"
        },
        "issuE1" : {
          "$ref" : "#/definitions/ISSUE"
        }
      }
    },
    "MESSAGE" : {
      "type" : "object",
      "properties" : {
        "messageid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "messagetext" : {
          "type" : "string"
        },
        "messagetime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "messagetransmitter" : {
          "type" : "string"
        },
        "messagereceiver" : {
          "type" : "string"
        },
        "messagereaddate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "aspNetUsers1" : {
          "$ref" : "#/definitions/AspNetUsers"
        }
      }
    },
    "NOTIFICATION" : {
      "type" : "object",
      "properties" : {
        "notificationid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "notificationuser" : {
          "type" : "string"
        },
        "notificationsubject" : {
          "type" : "string"
        },
        "notificationtext" : {
          "type" : "string"
        },
        "notificationtime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "notificationseen" : {
          "type" : "string",
          "format" : "date-time"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        }
      }
    },
    "ROLEFILTERUSERSEQUENCENUMBER" : {
      "type" : "object",
      "properties" : {
        "rolefilterid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userid" : {
          "type" : "string"
        },
        "sequencenumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "widgetrolefilter" : {
          "$ref" : "#/definitions/WIDGETROLEFILTER"
        }
      }
    },
    "SETTING" : {
      "type" : "object",
      "properties" : {
        "stgid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stgname" : {
          "type" : "string"
        },
        "stgvalue" : {
          "type" : "string"
        },
        "stguser" : {
          "type" : "string"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        }
      }
    },
    "USERDISABLED" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userid" : {
          "type" : "string"
        },
        "isdisabled" : {
          "type" : "boolean"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        }
      }
    },
    "USERISSUECONNECTION" : {
      "type" : "object",
      "properties" : {
        "issueid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userid" : {
          "type" : "string"
        },
        "isnew" : {
          "type" : "boolean"
        },
        "iswatched" : {
          "type" : "boolean"
        },
        "isassigned" : {
          "type" : "boolean"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "issue" : {
          "$ref" : "#/definitions/ISSUE"
        }
      }
    },
    "WIDGET" : {
      "type" : "object",
      "properties" : {
        "isEditable" : {
          "type" : "boolean"
        },
        "widgetrolefilters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETROLEFILTER"
          }
        },
        "widgetuserfilters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETUSERFILTER"
          }
        },
        "widgetid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widgettype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widgetuser" : {
          "type" : "string"
        },
        "widgetpage" : {
          "type" : "string"
        },
        "widgetx" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widgety" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widgeth" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widgetw" : {
          "type" : "integer",
          "format" : "int32"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "widgettypE1" : {
          "$ref" : "#/definitions/WIDGETTYPE"
        },
        "widgetsetting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETSETTING"
          }
        },
        "widgetrolefilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETROLEFILTER"
          }
        },
        "widgetuserfilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETUSERFILTER"
          }
        }
      }
    },
    "WIDGETUSERFILTER" : {
      "type" : "object",
      "properties" : {
        "filterid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filteruser" : {
          "type" : "string"
        },
        "filtertext" : {
          "type" : "string"
        },
        "filterwidget" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filtercolor" : {
          "type" : "string"
        },
        "filtericon" : {
          "type" : "string"
        },
        "filterbackgroundcolor" : {
          "type" : "string"
        },
        "filterdesc" : {
          "type" : "string"
        },
        "filtertype" : {
          "type" : "string"
        },
        "filterseqnr" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filter" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filtersortattribute" : {
          "type" : "string"
        },
        "filtersortdsc" : {
          "type" : "boolean"
        },
        "aspNetUsers" : {
          "$ref" : "#/definitions/AspNetUsers"
        },
        "filteR1" : {
          "$ref" : "#/definitions/FILTER"
        },
        "widget" : {
          "$ref" : "#/definitions/WIDGET"
        }
      }
    },
    "AspNetRoles" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "rolerights" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ROLERIGHTS"
          }
        },
        "widgetrolefilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETROLEFILTER"
          }
        },
        "aspNetUsers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetUsers"
          }
        },
        "issuestate" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUESTATE"
          }
        }
      }
    },
    "CUSTOMER" : {
      "type" : "object",
      "properties" : {
        "favstate" : {
          "type" : "boolean"
        },
        "issues" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/IssueOverviewModel"
          }
        },
        "contactpersonal" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/ContactPersonalOverviewModel"
          }
        },
        "customerid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "customernumber" : {
          "type" : "string"
        },
        "customername" : {
          "type" : "string"
        },
        "customerphone" : {
          "type" : "string"
        },
        "customerfax" : {
          "type" : "string"
        },
        "customermail" : {
          "type" : "string"
        },
        "customernote" : {
          "type" : "string"
        },
        "customeraddress" : {
          "type" : "integer",
          "format" : "int32"
        },
        "customeractive" : {
          "type" : "boolean"
        },
        "address" : {
          "$ref" : "#/definitions/ADDRESS"
        },
        "contract" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACT"
          }
        },
        "customercpersonallink" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CUSTOMERCPERSONALLINK"
          }
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        },
        "aspNetUsers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetUsers"
          }
        }
      }
    },
    "CONTRACTSTATE" : {
      "type" : "object",
      "properties" : {
        "contractstateid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contractstatename" : {
          "type" : "string"
        },
        "contractstatedesc" : {
          "type" : "string"
        },
        "contract" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACT"
          }
        }
      }
    },
    "CONTRACTTYPE" : {
      "type" : "object",
      "properties" : {
        "contracttypeid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contracttypename" : {
          "type" : "string"
        },
        "contracttypedesc" : {
          "type" : "string"
        },
        "contract" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACT"
          }
        }
      }
    },
    "LOCATION" : {
      "type" : "object",
      "properties" : {
        "locationid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "locationfloor" : {
          "type" : "string"
        },
        "locationpart" : {
          "type" : "string"
        },
        "locationparent" : {
          "type" : "integer",
          "format" : "int32"
        },
        "locationinfo" : {
          "type" : "string"
        },
        "locationaddress" : {
          "type" : "integer",
          "format" : "int32"
        },
        "address" : {
          "$ref" : "#/definitions/ADDRESS"
        },
        "availability" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AVAILABILITY"
          }
        },
        "contract" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACT"
          }
        },
        "contractitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACTITEM"
          }
        },
        "issueitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUEITEM"
          }
        },
        "locatioN1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LOCATION"
          }
        },
        "locatioN2" : {
          "$ref" : "#/definitions/LOCATION"
        },
        "offeritem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERITEM"
          }
        }
      }
    },
    "CONTRACTITEM" : {
      "type" : "object",
      "properties" : {
        "itemid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemname" : {
          "type" : "string"
        },
        "itemfaktdate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itembuildindate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemcontractid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemcount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemproduct" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemdesc" : {
          "type" : "string"
        },
        "iteminfo" : {
          "type" : "string"
        },
        "itemcanceldate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemsetupcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itempurchasecost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemrentalcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemlocation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemposition" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contract" : {
          "$ref" : "#/definitions/CONTRACT"
        },
        "location" : {
          "$ref" : "#/definitions/LOCATION"
        },
        "product" : {
          "$ref" : "#/definitions/PRODUCT"
        },
        "issueitemcontractitemtransformation" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUEITEMCONTRACTITEMTRANSFORMATION"
          }
        }
      }
    },
    "ISSUEITEM" : {
      "type" : "object",
      "properties" : {
        "itemid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemname" : {
          "type" : "string"
        },
        "itemcontract" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemcount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemproduct" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemdesc" : {
          "type" : "string"
        },
        "iteminfo" : {
          "type" : "string"
        },
        "itemposition" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemlocation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemsetupcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itempurchasecost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemrentalcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemissue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemfaktdate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itembuildindate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemcanceldate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "concurrencystamp" : {
          "type" : "string"
        },
        "contract" : {
          "$ref" : "#/definitions/CONTRACT"
        },
        "issue" : {
          "$ref" : "#/definitions/ISSUE"
        },
        "location" : {
          "$ref" : "#/definitions/LOCATION"
        },
        "product" : {
          "$ref" : "#/definitions/PRODUCT"
        },
        "issueitemcontractitemtransformation" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUEITEMCONTRACTITEMTRANSFORMATION"
          }
        }
      }
    },
    "OFFERITEM" : {
      "type" : "object",
      "properties" : {
        "itemid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemdesc" : {
          "type" : "string"
        },
        "iteminfo" : {
          "type" : "string"
        },
        "itemsetupcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemrentalcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itempurchasecost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemcontract" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemproduct" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itembuildindate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemlocation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemterm" : {
          "type" : "string"
        },
        "itemoffer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemcount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemfaktdate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemcanceldate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemposition" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemselected" : {
          "type" : "boolean"
        },
        "itemissue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contract" : {
          "$ref" : "#/definitions/CONTRACT"
        },
        "issue" : {
          "$ref" : "#/definitions/ISSUE"
        },
        "location" : {
          "$ref" : "#/definitions/LOCATION"
        },
        "offer" : {
          "$ref" : "#/definitions/OFFER"
        },
        "product" : {
          "$ref" : "#/definitions/PRODUCT"
        }
      }
    },
    "CHANGETYPE" : {
      "type" : "object",
      "properties" : {
        "typeid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "typename" : {
          "type" : "string"
        },
        "typedesc" : {
          "type" : "string"
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        }
      }
    },
    "CONTACTPERSONAL" : {
      "type" : "object",
      "properties" : {
        "contactpersid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contactpersfname" : {
          "type" : "string"
        },
        "contactperslname" : {
          "type" : "string"
        },
        "contactperssalutation" : {
          "type" : "string"
        },
        "contactperspublicid" : {
          "type" : "string"
        },
        "contactpersondepartment" : {
          "type" : "string"
        },
        "contactpersinfo" : {
          "type" : "string"
        },
        "contactpersaddress" : {
          "type" : "integer",
          "format" : "int32"
        },
        "address" : {
          "$ref" : "#/definitions/ADDRESS"
        },
        "contactinformation" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTACTINFORMATION"
          }
        },
        "customercpersonallink" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CUSTOMERCPERSONALLINK"
          }
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        },
        "issuE1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        },
        "offer" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFER"
          }
        },
        "offeR1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFER"
          }
        }
      }
    },
    "EMAIL" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "mailid" : {
          "type" : "string"
        },
        "emaildate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "emailmessage" : {
          "type" : "string"
        },
        "emailtransmitter" : {
          "type" : "string"
        },
        "emailsubject" : {
          "type" : "string"
        },
        "emailtype" : {
          "type" : "string"
        },
        "issueid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "emailtransmitteraddress" : {
          "type" : "string"
        },
        "issue" : {
          "$ref" : "#/definitions/ISSUE"
        }
      }
    },
    "ISSUECATEGORY" : {
      "type" : "object",
      "properties" : {
        "categoryid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "categoryname" : {
          "type" : "string"
        },
        "categorycolor" : {
          "type" : "string"
        },
        "categorydesc" : {
          "type" : "string"
        },
        "ischangecategory" : {
          "type" : "boolean"
        },
        "isincidentcategory" : {
          "type" : "boolean"
        },
        "isissuecategory" : {
          "type" : "boolean"
        },
        "isprojectcategory" : {
          "type" : "boolean"
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        }
      }
    },
    "ISSUESTATE" : {
      "type" : "object",
      "properties" : {
        "stateid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "statename" : {
          "type" : "string"
        },
        "statecolor" : {
          "type" : "string"
        },
        "statecode" : {
          "type" : "string"
        },
        "stateesctimedays" : {
          "type" : "integer",
          "format" : "int32"
        },
        "isvtstate" : {
          "type" : "boolean"
        },
        "iscpstate" : {
          "type" : "boolean"
        },
        "ischangestate" : {
          "type" : "boolean"
        },
        "isincidentstate" : {
          "type" : "boolean"
        },
        "isissuestate" : {
          "type" : "boolean"
        },
        "isprojectstate" : {
          "type" : "boolean"
        },
        "isfinalstatus" : {
          "type" : "boolean"
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        },
        "aspNetRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetRoles"
          }
        }
      }
    },
    "ISSUETYPE" : {
      "type" : "object",
      "properties" : {
        "typeid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "typename" : {
          "type" : "string"
        },
        "typecolor" : {
          "type" : "string"
        },
        "folderlocation" : {
          "type" : "string"
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        }
      }
    },
    "PRIORITY" : {
      "type" : "object",
      "properties" : {
        "priorityid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "prioritydesc" : {
          "type" : "string"
        },
        "prioritycolor" : {
          "type" : "string"
        },
        "prioritycode" : {
          "type" : "string"
        },
        "priorityname" : {
          "type" : "string"
        },
        "isissuepriority" : {
          "type" : "boolean"
        },
        "ischangepriority" : {
          "type" : "boolean"
        },
        "isincidentpriority" : {
          "type" : "boolean"
        },
        "isprojectpriority" : {
          "type" : "boolean"
        },
        "issue" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUE"
          }
        }
      }
    },
    "OFFER" : {
      "type" : "object",
      "properties" : {
        "offerid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offertitle" : {
          "type" : "string"
        },
        "offerdesc" : {
          "type" : "string"
        },
        "offercreator" : {
          "type" : "string"
        },
        "offercreation" : {
          "type" : "string",
          "format" : "date-time"
        },
        "offerbillingaddress" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offerserviceaddress" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offerissue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offerposition" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offerstate" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offernumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offercustomer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "customoffernote" : {
          "type" : "string"
        },
        "localcontact" : {
          "type" : "integer",
          "format" : "int32"
        },
        "commercialcontact" : {
          "type" : "integer",
          "format" : "int32"
        },
        "address" : {
          "$ref" : "#/definitions/ADDRESS"
        },
        "addresS1" : {
          "$ref" : "#/definitions/ADDRESS"
        },
        "contactpersonal" : {
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "contactpersonaL1" : {
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "issue" : {
          "$ref" : "#/definitions/ISSUE"
        },
        "offerstatE1" : {
          "$ref" : "#/definitions/OFFERSTATE"
        },
        "offeritem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERITEM"
          }
        }
      }
    },
    "WIDGETROLEFILTER" : {
      "type" : "object",
      "properties" : {
        "filterseqnr" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filterid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filterrole" : {
          "type" : "string"
        },
        "filtertext" : {
          "type" : "string"
        },
        "filterwidget" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filtercolor" : {
          "type" : "string"
        },
        "filtericon" : {
          "type" : "string"
        },
        "filterbackgroundcolor" : {
          "type" : "string"
        },
        "filterdesc" : {
          "type" : "string"
        },
        "filtertype" : {
          "type" : "string"
        },
        "filter" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filtersortattribute" : {
          "type" : "string"
        },
        "filtersortdsc" : {
          "type" : "boolean"
        },
        "aspNetRoles" : {
          "$ref" : "#/definitions/AspNetRoles"
        },
        "filteR1" : {
          "$ref" : "#/definitions/FILTER"
        },
        "rolefilterusersequencenumber" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ROLEFILTERUSERSEQUENCENUMBER"
          }
        },
        "widget" : {
          "$ref" : "#/definitions/WIDGET"
        }
      }
    },
    "WIDGETTYPE" : {
      "type" : "object",
      "properties" : {
        "wtypeid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "wtypename" : {
          "type" : "string"
        },
        "wtypeenable" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widget" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGET"
          }
        }
      }
    },
    "WIDGETSETTING" : {
      "type" : "object",
      "properties" : {
        "widgetsettingid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widgetsettingdesc" : {
          "type" : "string"
        },
        "widgetsettingvalue" : {
          "type" : "string"
        },
        "widgetid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "widget" : {
          "$ref" : "#/definitions/WIDGET"
        }
      }
    },
    "FILTER" : {
      "type" : "object",
      "properties" : {
        "filterid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "filterparent" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filteR1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FILTER"
          }
        },
        "filteR2" : {
          "$ref" : "#/definitions/FILTER"
        },
        "filtercondition" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FILTERCONDITION"
          }
        },
        "widgetrolefilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETROLEFILTER"
          }
        },
        "widgetuserfilter" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WIDGETUSERFILTER"
          }
        }
      }
    },
    "ROLERIGHTS" : {
      "type" : "object",
      "properties" : {
        "roleid" : {
          "type" : "string"
        },
        "ruleid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "value" : {
          "type" : "boolean"
        },
        "aspNetRoles" : {
          "$ref" : "#/definitions/AspNetRoles"
        },
        "rules" : {
          "$ref" : "#/definitions/RULES"
        }
      }
    },
    "IssueOverviewModel" : {
      "type" : "object",
      "properties" : {
        "issuetype" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "type of the issue"
        },
        "issueid" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "id of the issue"
        },
        "issuepriority" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "id of the priority"
        },
        "issuestate" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "state of the issue"
        },
        "issuetitle" : {
          "type" : "string",
          "description" : "title of the issue"
        },
        "issuecreation" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "date of the creation"
        },
        "issueescalation" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "date of the escalation"
        },
        "issuenumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "customer info of the related customer"
        },
        "isintroduced" : {
          "type" : "boolean",
          "description" : "current user is introduced"
        },
        "isnew" : {
          "type" : "boolean",
          "description" : "is new for the current user"
        },
        "iswatched" : {
          "type" : "boolean",
          "description" : "is new for the current user"
        },
        "state" : {
          "type" : "string"
        },
        "statecolor" : {
          "type" : "string"
        },
        "customer" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "changetype" : {
          "type" : "string"
        },
        "accessed" : {
          "type" : "string",
          "format" : "date-time"
        },
        "laststatuschange" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "description" : "the model contains the important overview data of an issue to reduce the data traffic"
    },
    "ContactPersonalOverviewModel" : {
      "type" : "object",
      "properties" : {
        "contactpersid" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the internal id"
        },
        "contactpersfname" : {
          "type" : "string",
          "description" : "the firstname"
        },
        "contactperslname" : {
          "type" : "string",
          "description" : "the lastname"
        },
        "contactperssalutation" : {
          "type" : "string",
          "description" : "the salutation (\"Herr\"/\"Frau\")"
        },
        "contactpersdepartment" : {
          "type" : "string"
        },
        "contactperspublicid" : {
          "type" : "string",
          "description" : "the public identifier"
        },
        "phone" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "fax" : {
          "type" : "string"
        }
      },
      "description" : "the class binds all important overview data about a contactperson"
    },
    "ADDRESS" : {
      "type" : "object",
      "properties" : {
        "addressid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "addressstreet" : {
          "type" : "string"
        },
        "addresshousenumber" : {
          "type" : "string"
        },
        "addressaddition" : {
          "type" : "string"
        },
        "addresszipcode" : {
          "type" : "string"
        },
        "addresscity" : {
          "type" : "string"
        },
        "addresscountry" : {
          "type" : "string"
        },
        "addressnote" : {
          "type" : "string"
        },
        "contactpersonal" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTACTPERSONAL"
          }
        },
        "customer" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CUSTOMER"
          }
        },
        "location" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LOCATION"
          }
        },
        "offer" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFER"
          }
        },
        "offeR1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFER"
          }
        }
      }
    },
    "CUSTOMERCPERSONALLINK" : {
      "type" : "object",
      "properties" : {
        "customer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contactpersonal" : {
          "type" : "integer",
          "format" : "int32"
        },
        "linkinfo" : {
          "type" : "string"
        },
        "contactpersonaL1" : {
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "customeR1" : {
          "$ref" : "#/definitions/CUSTOMER"
        }
      }
    },
    "AVAILABILITY" : {
      "type" : "object",
      "properties" : {
        "availabilityid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitylocation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitystate" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitycomponent" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitycomponenT1" : {
          "$ref" : "#/definitions/AVAILABILITYCOMPONENT"
        },
        "availabilitystatE1" : {
          "$ref" : "#/definitions/AVAILABILITYSTATE"
        },
        "location" : {
          "$ref" : "#/definitions/LOCATION"
        }
      }
    },
    "PRODUCT" : {
      "type" : "object",
      "properties" : {
        "productid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "productservice" : {
          "type" : "string"
        },
        "productdesc" : {
          "type" : "string"
        },
        "productnumber" : {
          "type" : "string"
        },
        "producttype" : {
          "type" : "string"
        },
        "productsetupcost" : {
          "type" : "number",
          "format" : "double"
        },
        "productpurchasecost" : {
          "type" : "number",
          "format" : "double"
        },
        "productrentalcost" : {
          "type" : "number",
          "format" : "double"
        },
        "productgroup" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contractitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTRACTITEM"
          }
        },
        "issueitem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ISSUEITEM"
          }
        },
        "offeritem" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERITEM"
          }
        },
        "productgrouP1" : {
          "$ref" : "#/definitions/PRODUCTGROUP"
        },
        "productpicture" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PRODUCTPICTURE"
          }
        }
      }
    },
    "ISSUEITEMCONTRACTITEMTRANSFORMATION" : {
      "type" : "object",
      "properties" : {
        "issueitem" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contractitem" : {
          "type" : "integer",
          "format" : "int32"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "creator" : {
          "type" : "string"
        },
        "contractiteM1" : {
          "$ref" : "#/definitions/CONTRACTITEM"
        },
        "issueiteM1" : {
          "$ref" : "#/definitions/ISSUEITEM"
        }
      }
    },
    "CONTACTINFORMATION" : {
      "type" : "object",
      "properties" : {
        "infoid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "infotype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "infovalue" : {
          "type" : "string"
        },
        "infocpers" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contactpersonal" : {
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "contactinformationtype" : {
          "$ref" : "#/definitions/CONTACTINFORMATIONTYPE"
        }
      }
    },
    "OFFERSTATE" : {
      "type" : "object",
      "properties" : {
        "offerstateid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offerstatename" : {
          "type" : "string"
        },
        "offerstatecolor" : {
          "type" : "string"
        },
        "offerstatedesc" : {
          "type" : "string"
        },
        "offer" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFER"
          }
        },
        "offertransaction" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERTRANSACTION"
          }
        }
      }
    },
    "FILTERCONDITION" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "attribute" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "filterid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "operation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filter" : {
          "$ref" : "#/definitions/FILTER"
        }
      }
    },
    "RULES" : {
      "type" : "object",
      "properties" : {
        "ruleid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "rulecode" : {
          "type" : "string"
        },
        "ruledesc" : {
          "type" : "string"
        },
        "rulename" : {
          "type" : "string"
        },
        "rulegroup" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ruleisnecessary" : {
          "type" : "boolean"
        },
        "rolerights" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ROLERIGHTS"
          }
        },
        "rulegrouP1" : {
          "$ref" : "#/definitions/RULEGROUP"
        }
      }
    },
    "AVAILABILITYCOMPONENT" : {
      "type" : "object",
      "properties" : {
        "availabilitycomponentid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitycomponentname" : {
          "type" : "string"
        },
        "availabilitycomponentrequirement" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availability" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AVAILABILITY"
          }
        },
        "availabilityrequirement" : {
          "$ref" : "#/definitions/AVAILABILITYREQUIREMENT"
        }
      }
    },
    "AVAILABILITYSTATE" : {
      "type" : "object",
      "properties" : {
        "availabilitystateid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitystatename" : {
          "type" : "string"
        },
        "availabilitystatedeliverymin" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitystatedeliverymax" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilitystatedesc" : {
          "type" : "string"
        },
        "availability" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AVAILABILITY"
          }
        }
      }
    },
    "PRODUCTGROUP" : {
      "type" : "object",
      "properties" : {
        "productgroupid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "productgroupnumber" : {
          "type" : "string"
        },
        "productgroupname" : {
          "type" : "string"
        },
        "productgroupparent" : {
          "type" : "integer",
          "format" : "int32"
        },
        "product" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PRODUCT"
          }
        },
        "productgrouP1" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PRODUCTGROUP"
          }
        },
        "productgrouP2" : {
          "$ref" : "#/definitions/PRODUCTGROUP"
        }
      }
    },
    "PRODUCTPICTURE" : {
      "type" : "object",
      "properties" : {
        "pictureid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "productid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "picturemediatype" : {
          "type" : "string"
        },
        "picturedata" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "product" : {
          "$ref" : "#/definitions/PRODUCT"
        }
      }
    },
    "CONTACTINFORMATIONTYPE" : {
      "type" : "object",
      "properties" : {
        "typeid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "typename" : {
          "type" : "string"
        },
        "typedesc" : {
          "type" : "string"
        },
        "contactinformation" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CONTACTINFORMATION"
          }
        }
      }
    },
    "OFFERTRANSACTION" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "result" : {
          "type" : "integer",
          "format" : "int32"
        },
        "icon" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "offertransactionattribute" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERTRANSACTIONATTRIBUTE"
          }
        },
        "offerstate" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERSTATE"
          }
        }
      }
    },
    "RULEGROUP" : {
      "type" : "object",
      "properties" : {
        "rulegroupid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "rulegroupname" : {
          "type" : "string"
        },
        "rulegroupdesc" : {
          "type" : "string"
        },
        "rulegrouppriority" : {
          "type" : "string"
        },
        "rulegroupindex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "rules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RULES"
          }
        }
      }
    },
    "AVAILABILITYREQUIREMENT" : {
      "type" : "object",
      "properties" : {
        "availabilityrequirementid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availabilityrequirementname" : {
          "type" : "string"
        },
        "availabilityrequirementdesc" : {
          "type" : "string"
        },
        "availabilitycomponent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AVAILABILITYCOMPONENT"
          }
        }
      }
    },
    "OFFERTRANSACTIONATTRIBUTE" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "offertransaction" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OFFERTRANSACTION"
          }
        }
      }
    },
    "ResetPasswordRequest" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        }
      }
    },
    "ConfirmPasswordResetRequest" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "password" : {
          "type" : "string"
        },
        "confirmPassword" : {
          "type" : "string"
        }
      }
    },
    "SearchModel" : {
      "type" : "object",
      "properties" : {
        "searchString" : {
          "type" : "string",
          "description" : "the search term of the user"
        },
        "searchState" : {
          "type" : "array",
          "description" : "the searched state ids",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "searchPriority" : {
          "type" : "array",
          "description" : "the searched priority ids",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "searchCategory" : {
          "type" : "array",
          "description" : "the searched category ids",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "searchCustomer" : {
          "type" : "array",
          "description" : "the searched customers ids",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "searchContactPersonal" : {
          "type" : "array",
          "description" : "the searched contactpersonal ids",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "searchFavoured" : {
          "type" : "boolean",
          "description" : "search for favoured"
        },
        "searchIntroduced" : {
          "type" : "boolean",
          "description" : "search for introduced"
        },
        "searchRoleIntroduced" : {
          "type" : "boolean",
          "description" : "search for role introduction"
        },
        "searchUnseen" : {
          "type" : "boolean",
          "description" : "search the unseen"
        },
        "searchLatest" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "search the latest number of entries"
        },
        "searchLimit" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "search the latest number of entries"
        },
        "searchType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "search the latest number of entries"
        },
        "searchWatched" : {
          "type" : "boolean",
          "description" : "search for watched"
        },
        "searchVT" : {
          "type" : "boolean",
          "description" : "search for objects that are related to versatel"
        },
        "distinct" : {
          "type" : "boolean",
          "description" : "should the results distinct"
        },
        "enableAND" : {
          "type" : "boolean",
          "description" : "are the criteria and linked?"
        },
        "page" : {
          "description" : "the pagination page",
          "$ref" : "#/definitions/PaginationPage"
        },
        "filter" : {
          "$ref" : "#/definitions/FILTER"
        }
      },
      "description" : "the class represents the search request of an user"
    },
    "GenericPostRequest[CONTACTPERSONAL]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/CONTACTPERSONAL"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "GenericPostRequest[CONTRACT]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/CONTRACT"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "GenericPostRequest[CONTRACTITEM]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/CONTRACTITEM"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "GenericPostRequest[CUSTOMER]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/CUSTOMER"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "DeleteCustomerRequest" : {
      "type" : "object",
      "properties" : {
        "deleteIssues" : {
          "type" : "boolean"
        },
        "deleteContracts" : {
          "type" : "boolean"
        }
      }
    },
    "IssueTransactionDefaultMailResponse" : {
      "type" : "object",
      "properties" : {
        "mailid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "maildefaultnotification" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "transactionid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "defaultnotification" : {
          "$ref" : "#/definitions/DefaultNotification"
        },
        "mailreceiver" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DefaultNotification" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "creator" : {
          "type" : "string"
        },
        "lastModified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "internalDescription" : {
          "type" : "string"
        },
        "subject" : {
          "type" : "string"
        },
        "htmlContent" : {
          "type" : "string"
        },
        "appendUserSignature" : {
          "type" : "boolean"
        },
        "defaultCustomerFeedback" : {
          "type" : "boolean"
        },
        "defaultNotificationIssueTransactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionDefaultNotification"
          }
        }
      }
    },
    "IssueTransactionDefaultNotification" : {
      "type" : "object",
      "properties" : {
        "defaultNotificationGuid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueTransactionIdentifier" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "defaultNotification" : {
          "$ref" : "#/definitions/DefaultNotification"
        },
        "issueTransactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransaction"
          }
        }
      }
    },
    "IssueTransaction" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "name" : {
          "type" : "string"
        },
        "result" : {
          "type" : "integer",
          "format" : "int32"
        },
        "icon" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "role" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 0, 1, 2, 3 ]
        },
        "issueTransactionAudit" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionAudit"
          }
        },
        "issueTransactionAttributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionAttributes"
          }
        },
        "issueTransactionInitialStatuses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionInitialStatus"
          }
        },
        "issueTransactionDefaultMails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionDefaultMail"
          }
        },
        "issueTransactionDefaultNotifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionDefaultNotification"
          }
        }
      }
    },
    "IssueTransactionAudit" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "dateTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "transactionIdentifier" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "auditNote" : {
          "type" : "string"
        },
        "issueAuditWrapperId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueAuditWrapper" : {
          "$ref" : "#/definitions/IssueAuditWrapper"
        },
        "issueTransaction" : {
          "$ref" : "#/definitions/IssueTransaction"
        }
      }
    },
    "IssueTransactionAttributes" : {
      "type" : "object",
      "properties" : {
        "issueTransactionAttribute" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
        },
        "transactionIdenfier" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueTransaction" : {
          "$ref" : "#/definitions/IssueTransaction"
        }
      }
    },
    "IssueTransactionInitialStatus" : {
      "type" : "object",
      "properties" : {
        "transactionIdentifier" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "statusIdentifier" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issueTransaction" : {
          "$ref" : "#/definitions/IssueTransaction"
        }
      }
    },
    "IssueTransactionDefaultMail" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "creator" : {
          "type" : "string"
        },
        "lastModified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastModifier" : {
          "type" : "string"
        },
        "defaultNotificationGuid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueTransactionIdentifier" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "defaultNotification" : {
          "$ref" : "#/definitions/DefaultNotification"
        },
        "issueTransactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransaction"
          }
        },
        "issueTransactionDefaultMailReceivers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionDefaultMailReceiver"
          }
        }
      }
    },
    "IssueAuditWrapper" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueIdentifier" : {
          "type" : "integer",
          "format" : "int32"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "recordEnd" : {
          "type" : "string",
          "format" : "date-time"
        },
        "userId" : {
          "type" : "string"
        },
        "specialAction" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 0, 1, 2, 3 ]
        },
        "running" : {
          "type" : "boolean"
        },
        "eMailAudit" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EMailAudit"
          }
        },
        "issueStatus" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Issue"
          }
        },
        "issueFileAudit" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueFileAudit"
          }
        },
        "issueItemStatus" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueItem"
          }
        },
        "issueTransactionAudit" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionAudit"
          }
        },
        "issueUserAssignments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueUserAssignment"
          }
        }
      }
    },
    "IssueTransactionDefaultMailReceiver" : {
      "type" : "object",
      "properties" : {
        "issueTransactionDefaultMailGuid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "eMailAddressGuid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueTransactionDefaultMail" : {
          "$ref" : "#/definitions/IssueTransactionDefaultMail"
        },
        "eMailAddress" : {
          "$ref" : "#/definitions/EMailAddress"
        }
      }
    },
    "EMailAudit" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "received" : {
          "type" : "string",
          "format" : "date-time"
        },
        "receivedUtc" : {
          "type" : "string",
          "format" : "date-time"
        },
        "messageId" : {
          "type" : "string"
        },
        "body" : {
          "type" : "string"
        },
        "htmlBody" : {
          "type" : "string"
        },
        "subject" : {
          "type" : "string"
        },
        "incoming" : {
          "type" : "boolean"
        },
        "issueAuditWrapperId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "transmitterId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "receiverId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "inbox" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 0, 1, 2 ]
        },
        "issueAuditWrapper" : {
          "$ref" : "#/definitions/IssueAuditWrapper"
        },
        "transmitter" : {
          "$ref" : "#/definitions/EMailAddress"
        },
        "receiver" : {
          "$ref" : "#/definitions/EMailAddress"
        },
        "mailAttachements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MailAttachement"
          }
        }
      }
    },
    "Issue" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "anchestorId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueAuditWrapperId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "note" : {
          "type" : "string"
        },
        "issueid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuecreator" : {
          "type" : "string"
        },
        "issuecreation" : {
          "type" : "string",
          "format" : "date-time"
        },
        "issuecustomer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuepriority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuecategory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuedesc" : {
          "type" : "string"
        },
        "issuestate" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuetitle" : {
          "type" : "string"
        },
        "folderlocation" : {
          "type" : "string"
        },
        "issueescalation" : {
          "type" : "string",
          "format" : "date-time"
        },
        "issuenumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuetype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "changetype" : {
          "type" : "integer",
          "format" : "int32"
        },
        "commercialcontactpersonalid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "localcontactpersonalid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issuenote" : {
          "type" : "string"
        },
        "laststatuschange" : {
          "type" : "string",
          "format" : "date-time"
        },
        "filesexported" : {
          "type" : "boolean"
        },
        "isLatestStatus" : {
          "type" : "boolean"
        },
        "issueAuditWrapper" : {
          "$ref" : "#/definitions/IssueAuditWrapper"
        }
      }
    },
    "IssueFileAudit" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "nextcloudHref" : {
          "type" : "string"
        },
        "issueAuditWrapperId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "action" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 0, 1, 2 ]
        },
        "destination" : {
          "type" : "string"
        },
        "issueAuditWrapper" : {
          "$ref" : "#/definitions/IssueAuditWrapper"
        }
      }
    },
    "IssueItem" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "anchestorId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueAuditWrapperId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "note" : {
          "type" : "string"
        },
        "itemid" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemname" : {
          "type" : "string"
        },
        "itemcontract" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemcount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemproduct" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemdesc" : {
          "type" : "string"
        },
        "iteminfo" : {
          "type" : "string"
        },
        "itemposition" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemlocation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemsetupcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itempurchasecost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemrentalcost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemissue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "itemfaktdate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itembuildindate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itemcanceldate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "anchestor" : {
          "$ref" : "#/definitions/IssueItem"
        },
        "issueAuditWrapper" : {
          "$ref" : "#/definitions/IssueAuditWrapper"
        },
        "anchestorFor" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueItem"
          }
        }
      }
    },
    "IssueUserAssignment" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "note" : {
          "type" : "string"
        },
        "issueAuditWrapperId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "issueId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "userId" : {
          "type" : "string"
        },
        "isNew" : {
          "type" : "boolean"
        },
        "isAssigned" : {
          "type" : "boolean"
        },
        "isWatched" : {
          "type" : "boolean"
        },
        "issueAuditWrapper" : {
          "$ref" : "#/definitions/IssueAuditWrapper"
        }
      }
    },
    "EMailAddress" : {
      "type" : "object",
      "properties" : {
        "guid" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "address" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "transmitterAddressFor" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EMailAudit"
          }
        },
        "receiverAddressFor" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EMailAudit"
          }
        },
        "issueTransactionDefaultMailReceivers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueTransactionDefaultMailReceiver"
          }
        }
      }
    },
    "MailAttachement" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        }
      }
    },
    "GenericPostRequest[ISSUE]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/ISSUE"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "GenericPostRequest[ISSUEITEM]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/ISSUEITEM"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "IssueItemContractMap" : {
      "type" : "object",
      "properties" : {
        "item" : {
          "type" : "integer",
          "format" : "int32"
        },
        "contract" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "IssueItemContractItemTransformationRequest" : {
      "type" : "object",
      "properties" : {
        "map" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IssueItemContractMap"
          }
        }
      }
    },
    "ReportMonthRequest" : {
      "type" : "object",
      "properties" : {
        "year" : {
          "type" : "integer",
          "format" : "int32"
        },
        "month" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "IssueTimeConclusionRequest" : {
      "type" : "object",
      "properties" : {
        "issueId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "blocks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TimeConclusionRequestBlock"
          }
        }
      }
    },
    "TimeConclusionRequestBlock" : {
      "type" : "object",
      "properties" : {
        "statusIdentifiers" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "IssueTransactionExecutedRequest" : {
      "type" : "object",
      "properties" : {
        "issueId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transactionId" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "00000000-0000-0000-0000-000000000000"
        },
        "auditNote" : {
          "type" : "string"
        }
      }
    },
    "GenericPostRequest[LOCATION]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/LOCATION"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "MailModel" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "represents the backends internal mail id"
        },
        "mailId" : {
          "type" : "string",
          "description" : "the attribute contains the id of the email"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the attribute contains the date of the email's creation"
        },
        "body" : {
          "type" : "string",
          "description" : "the mail's content"
        },
        "transmitter" : {
          "type" : "array",
          "description" : "the message's transmitter(s)",
          "items" : {
            "$ref" : "#/definitions/InternetAddress"
          }
        },
        "receiver" : {
          "type" : "array",
          "description" : "the mail's receivers",
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "the type of the mail"
        },
        "subject" : {
          "type" : "string",
          "description" : "the mail's subject"
        },
        "attachements" : {
          "type" : "array",
          "description" : "all attachements",
          "items" : {
            "$ref" : "#/definitions/MailAttachement"
          }
        },
        "uploads" : {
          "type" : "array",
          "description" : "uploads",
          "items" : {
            "$ref" : "#/definitions/UploadMailAttachementModel"
          }
        }
      }
    },
    "InternetAddress" : {
      "type" : "object",
      "properties" : {
        "encoding" : {
          "$ref" : "#/definitions/Encoding"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "UploadMailAttachementModel" : {
      "type" : "object",
      "properties" : {
        "blob" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "name" : {
          "type" : "string"
        },
        "type1" : {
          "type" : "string"
        },
        "type2" : {
          "type" : "string"
        }
      }
    },
    "Encoding" : {
      "type" : "object",
      "properties" : {
        "bodyName" : {
          "type" : "string",
          "readOnly" : true
        },
        "encodingName" : {
          "type" : "string",
          "readOnly" : true
        },
        "headerName" : {
          "type" : "string",
          "readOnly" : true
        },
        "webName" : {
          "type" : "string",
          "readOnly" : true
        },
        "windowsCodePage" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "isBrowserDisplay" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "isBrowserSave" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "isMailNewsDisplay" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "isMailNewsSave" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "isSingleByte" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "encoderFallback" : {
          "$ref" : "#/definitions/EncoderFallback"
        },
        "decoderFallback" : {
          "$ref" : "#/definitions/DecoderFallback"
        },
        "isReadOnly" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "codePage" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      }
    },
    "EncoderFallback" : {
      "type" : "object",
      "properties" : {
        "maxCharCount" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      }
    },
    "DecoderFallback" : {
      "type" : "object",
      "properties" : {
        "maxCharCount" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      }
    },
    "MailIdFileNameMap" : {
      "type" : "object",
      "properties" : {
        "mailId" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        }
      }
    },
    "InlineImageRequest" : {
      "type" : "object",
      "properties" : {
        "inbox" : {
          "type" : "integer",
          "format" : "int32"
        },
        "messageId" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        }
      }
    },
    "NextCloudSearchRequest" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "the nextcloud user's name"
        },
        "userid" : {
          "type" : "string",
          "description" : "the web api user's id"
        },
        "aspusername" : {
          "type" : "string",
          "description" : "the web api user's name"
        },
        "path" : {
          "type" : "string",
          "description" : "the requests path"
        },
        "type" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the requests type",
          "enum" : [ 0, 1, 2 ]
        },
        "newpath" : {
          "type" : "string",
          "description" : "the updated location"
        },
        "getid" : {
          "type" : "string",
          "description" : "the id of the requested file"
        }
      },
      "description" : "the class represents a nextcloud search request"
    },
    "DownloadToZip" : {
      "type" : "object",
      "properties" : {
        "download" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CalendarModel" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "the calendar's name"
        },
        "href" : {
          "type" : "string",
          "description" : "the calendar's access href"
        },
        "owner" : {
          "type" : "string",
          "description" : "the owner's name"
        },
        "color" : {
          "type" : "string",
          "description" : "the calendar's color"
        },
        "eTag" : {
          "type" : "string",
          "description" : "the calendar's etag"
        },
        "content" : {
          "type" : "array",
          "description" : "the calendar's content",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "the class binds a calendars information"
    },
    "CalendarEntryModel" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string"
        },
        "eTag" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string"
        },
        "lastModified" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "start" : {
          "type" : "string"
        },
        "end" : {
          "type" : "string"
        }
      }
    },
    "GenericPostRequest[OFFER]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/OFFER"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "TransformOfferToIssueRequest" : {
      "type" : "object",
      "properties" : {
        "offerId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "issueData" : {
          "$ref" : "#/definitions/ISSUE"
        }
      }
    },
    "GenericPostRequest[OFFERITEM]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/OFFERITEM"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "GenericPostRequest[PRODUCT]" : {
      "type" : "object",
      "properties" : {
        "note" : {
          "type" : "string",
          "description" : "the later audit note (if exists)"
        },
        "content" : {
          "description" : "the object that is sended to the server",
          "$ref" : "#/definitions/PRODUCT"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the time the request was sended"
        },
        "transaction" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the id of the transaction (only required when starting a transaction)"
        },
        "ignoreAttachements" : {
          "type" : "array",
          "description" : "the ignored attachment's ids",
          "items" : {
            "type" : "string"
          }
        },
        "mailIds" : {
          "type" : "array",
          "description" : "the mail id of the related email",
          "items" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "description" : "the class represents a generic post request"
    },
    "RoleModel" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "aspNetUsers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AspNetUsers"
          }
        },
        "rolerights" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ROLERIGHTS"
          }
        }
      }
    }
  }
}